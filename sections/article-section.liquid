{{ 'section-blog-post.css' | asset_url | stylesheet_tag }}

<article class="article-template article-with-toc">
  {% assign toc_mode_value = section.settings.toc_mode %}
  {% assign include_h3_value = section.settings.include_h3 %}

{% style %}
.article-with-toc {
  --article-scroll-offset: {{ section.settings.scroll_offset | default: 100 }}px;
}

.article-body.rte h2,
.article-body.rte h3 {
  scroll-margin-top: var(--article-scroll-offset);
}

.article-header {
  max-width: 100%;
}

.article-title {
  max-width: 1280px;
  margin: 0 auto 60px auto;
  font-size: 32px;
  line-height: 1.2;
  font-weight: 700;
  color: var(--color-main-text);
  font-family: var(--font-heading-main);
}

.article-hero {
  max-width: 1280px;
  margin: 0 auto 24px auto;
  border-radius: 16px;
  overflow: hidden;
}

.article-wrap,
.article-wrap--2,
.article-wrap--3 {
  max-width: 1280px;
  margin: 0 auto;
  display: flex;
  align-items: flex-start;
  /* gap: 74px; */
  justify-content: space-between;
}

.article-toc { flex: 0 0 190px; }
.article-body { flex: 1 1 auto; max-width: 600px; }
.article-aside-right { flex: 0 0 190px; }

.article-toc {
  position: sticky;
  top: 60px;
  align-self: start;
}

.article-toc__title {
  font-size: 16px;
  font-weight: 700;
  margin: 0 0 12px 0;
  color: var(--color-main-text);
  font-family: var(--font-heading-main);
}

.article-toc__list {
  list-style: none;
  padding: 0;
  margin: 0;
  display: block;
  border-top: 1px solid #D7D7D7;
}
.article-toc__item {
  padding: 16px 0;
  border-bottom: 1px solid #D7D7D7;
  max-width: 190px;
}
.article-toc__link {
  text-decoration: none;
  color: #87878D;
  font-size: 14px;
  line-height: 1.3;
  font-family: var(--font-heading-main);
}
.article-toc__link:hover,
.article-toc__link.is-active {
  color: var(--color-main-text);
  font-weight: 600;
}

.is-desktop { display: block; }
.is-mobile { display: none; }

.toc-select-wrap {
  position: relative;
  width: 100%;
  max-width: 190px;
  margin-bottom: 12px;
}
.toc-select {
  width: 100%;
  padding: 12px 40px 12px 12px;
  font-size: 14px;
  line-height: 16px;
  font-family: var(--font-heading-main);
  border: 1px solid #D7D7D7;
  border-radius: 16px;
  background: #fff;
  color: #87878D;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
}
.toc-select__icon {
  position: absolute;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  display: inline-flex;
}

.article-body { color: var(--color-main-text); }
.article-body p {
  font-size: 16px;
  line-height: 24px;
  color: var(--color-main-text);
}
.article-body.rte h2 {
  margin-top: 28px;
  font-size: 28px;
  line-height: 34px;
  color: var(--color-main-text);
  font-family: var(--font-heading-main);
  font-weight: 700;
}
.article-body.rte h3 {
  margin-top: 18px;
  font-size: 28px;
  line-height: 34px;
  color: var(--color-main-text);
  font-family: var(--font-heading-main);
  font-weight: 700;
}

.article-footer {
  max-width: 1280px;
  margin: 24px auto 0 auto;
}

.article-meta {
  max-width: 1280px;
  margin-top: 40px;
  display: flex;
  gap: 24px;
  padding: 0;
}
.article-meta__item { flex: 1 1 0; }
.article-meta__label {
  font-size: 12px;
  line-height: 1.2;
  color: #9DA3AF;
  margin-bottom: 6px;
  display: block;
  font-family: var(--font-heading-main);
}
.article-meta__value {
  font-size: 14px;
  line-height: 1.3;
  color: var(--color-main-text);
}

.article-wrap--3 img {
  border-radius: 20px;
}

.article-aside-right {
  position: sticky;
  top: 60px;
  align-self: start;
}
.article-subscribe {
  background: #fff;
  border-radius: 16px;
}
.article-subscribe__title {
  font-size: 16px;
  line-height: 1.2;
  font-weight: 700;
  margin: 0 0 12px 0;
  color: var(--color-main-text);
  font-family: var(--font-heading-main);
}
.article-subscribe__form { }
.article-subscribe__input-group {
  display: flex;
  flex-direction: column;
  max-width: 190px;
  gap: 8px;
}
.article-subscribe__input {
  flex: 1;
  height: 44px;
  padding: 0 12px;
  font-size: 14px;
  line-height: 44px;
  border: 1px solid #D7D7D7;
  border-radius: 12px;
  color: var(--color-main-text);
  background: #fff;
}
.article-subscribe__button {
  height: 44px;
  padding: 0 16px;
  border: none;
  border-radius: 12px;
  font-size: 14px;
  font-weight: 700;
  background: #111;
  color: #fff;
  cursor: pointer;
}
.article-subscribe__button:hover { opacity: .9; }
.article-subscribe__msg {
  display: block;
  margin-top: 8px;
  font-size: 12px;
  line-height: 1.3;
}
.article-subscribe__msg--error { color: #b00020; }
.article-subscribe__msg--success { color: #0a7f2e; }

.article-related {
  max-width: 1280px;
  margin: 100px auto 0 auto;
  padding: 0;
}
.article-related__title {
  font-size: 28px;
  line-height: 34px;
  letter-spacing: 0;
  font-weight: 700;
  color: var(--color-main-text);
  font-family: var(--font-heading-main);
  margin-bottom: 60px;
}
.article-related__grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 28px;
}
.related-card {
  display: flex;
  text-decoration: none;
  flex-direction: column;
  align-items: stretch;
  height: 100%;
  color: inherit;
}
.related-card__media {
  width: 100%;
  border-radius: 16px;
  overflow: hidden;
  margin-bottom: 30px;
  height: 208px;
}
.related-card__media img {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.related-card__date {
  font-size: 16px;
  line-height: 16px;
  color: var(--color-main-text);
  margin-bottom: 16px;
}
.related-card__title {
  font-size: 24px;
  line-height: 32px;
  letter-spacing: 0;
  font-weight: 700;
  color: var(--color-main-text);
  font-family: var(--font-heading-main);
  margin-bottom: 30px;
}
.related-card__tags {
  font-size: 14px;
  line-height: 16px;
  color: var(--color-main-text);
}

.article-related__slider { display: none; }
.article-related .swiper { overflow: hidden; }
.article-related .swiper-wrapper { align-items: stretch; }
.article-related .swiper-slide { width: 100%; }
.article-related .swiper-pagination {
  position: static;
  display: flex;
  justify-content: center;
  gap: 8px;
  margin-top: 12px;
}
.article-related .swiper-pagination-bullet {
  width: 8px;
  height: 8px;
  border-radius: 999px;
  border: 1px solid #111;
  background: transparent;
  opacity: 1;
}
.article-related .swiper-pagination-bullet-active { background: #111; }

@media (max-width: 1300px) {
  /* .article-template{
    padding: 0 10px;
  } */
  .breadcrumbs--article {
    padding: 20px 10px 0;
  }
}

@media(max-width: 1300px){
  .article-wrap,
  .article-wrap--2,
  .article-wrap--3 {
    padding: 0 10px;
  }
}

@media (max-width: 989px) {
  .article-related__grid { grid-template-columns: repeat(2, 1fr); }
}
@media (max-width: 749px) {
  .article-related__grid { display: none; }
  .article-related__slider { display: block; }
  .article-related__slider .swiper {
    padding: 0 10px;
  }
}

@media (max-width: 749px) {
  .toc-select-wrap {
    max-width: 100%;
  }
  .article-title { font-size: 24px; }

  .article-wrap,
  .article-wrap--2,
  .article-wrap--3 {
    padding: 0 10px;
    flex-direction: column;
    gap: 24px;
  }

  .article-toc {
    position: static;
    order: -1;
    margin-bottom: 8px;
    flex: 1 1 auto;
    width: 100%;
  }

  .article-body { 
    max-width: 100%;
    border-bottom: 1px solid #D7D7D7;
    padding-bottom: 50px; 
  }

  .is-desktop { display: none; }
  .is-mobile { display: block; }

  .article-meta {
    padding: 0 10px;
    justify-content: space-between;
    gap: 12px;
    margin-bottom: 20px;
  }

  .article-meta__value,
  .article-meta__label {
    font-size: 10px;
    line-height: 16px;
  }

  .article-aside-right { 
    position: static;
    display: none;
  }

  .related-card__title {
    font-size: 20px;
    line-height: 26px;
    margin-bottom: 40px;
  }
  .article-related__title {
    font-size: 20px;
    line-height: 24px;
    padding: 0 10px;
  }
  .article-body.rte h2 {
    font-size: 20px;
    line-height: 20px;
  }
  .article-related {
    margin: 50px auto 0 auto;
  }
  .article-header {
    padding: 0 10px;
  }
}
{% endstyle %}

  {% for block in section.blocks %}
    {% case block.type %}
      {% when '@app' %}
        <div class="page-width page-width--narrow">
          {% render block %}
        </div>

      {% when 'featured_image' %}
        {% if article.image %}
          <div class="article-hero" {{ block.shopify_attributes }}>
            <img
              srcset="
                {% if article.image.width >= 350 %}{{ article.image | image_url: width: 350 }} 350w,{% endif %}
                {% if article.image.width >= 750 %}{{ article.image | image_url: width: 750 }} 750w,{% endif %}
                {% if article.image.width >= 1100 %}{{ article.image | image_url: width: 1100 }} 1100w,{% endif %}
                {% if article.image.width >= 1500 %}{{ article.image | image_url: width: 1500 }} 1500w,{% endif %}
                {% if article.image.width >= 2200 %}{{ article.image | image_url: width: 2200 }} 2200w,{% endif %}
                {% if article.image.width >= 3000 %}{{ article.image | image_url: width: 3000 }} 3000w,{% endif %}
                {{ article.image | image_url }} {{ article.image.width }}w
              "
              sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 }}px, (min-width: 750px) calc(100vw - 10rem), 100vw"
              src="{{ article.image | image_url: width: 1600 }}"
              loading="eager"
              fetchpriority="high"
              width="{{ article.image.width }}"
              height="{{ article.image.height }}"
              alt="{{ article.image.alt | default: article.title | escape }}"
              style="display:block; width:100%; height:auto;"
            >
          </div>
        {% endif %}
        {% when 'meta' %}
        <div class="article-meta page-width" {{ block.shopify_attributes }}>
            {% if block.settings.show_date %}
            <div class="article-meta__item">
                <span class="article-meta__label">{{ block.settings.date_label }}</span>
                <div class="article-meta__value">
                {{ article.published_at | time_tag: format: block.settings.date_format }}
                </div>
            </div>
            {% endif %}

            {% if block.settings.show_categories %}
            <div class="article-meta__item">
                <span class="article-meta__label">{{ block.settings.categories_label }}</span>
                <div class="article-meta__value">
                {% if article.tags.size > 0 %}
                    {% if block.settings.max_tags > 0 %}
                    {% for t in article.tags limit: block.settings.max_tags %}
                        {{- t -}}{% unless forloop.last %}, {% endunless %}
                    {% endfor %}
                    {% else %}
                    {{ article.tags | join: ', ' }}
                    {% endif %}
                {% else %}
                    {{ block.settings.empty_categories_fallback }}
                {% endif %}
                </div>
            </div>
            {% endif %}

            {% if block.settings.show_reading_time %}
            <div class="article-meta__item">
                <span class="article-meta__label">{{ block.settings.reading_label }}</span>
                <div class="article-meta__value">
                {% assign words = article.content | strip_html | replace: '&nbsp;', ' ' | split: ' ' | size %}
                {% assign wpm = block.settings.words_per_minute | default: 200 %}
                {% assign minutes = words | times: 1.0 | divided_by: wpm | ceil %}
                {% if minutes < 1 %}{% assign minutes = 1 %}{% endif %}
                {{ minutes }} {{ block.settings.minutes_suffix }}
                </div>
            </div>
            {% endif %}
        </div>
      {% when 'title' %}
        <header class="page-width page-width--narrow article-header" {{ block.shopify_attributes }}>
          <h1 class="article-title">{{ article.title | escape }}</h1>
          {% if block.settings.blog_show_date %}
            <span class="circle-divider caption-with-letter-spacing">
              {{ article.published_at | time_tag: format: 'date' }}
            </span>
          {% endif %}
          {% if block.settings.blog_show_author %}
            <span class="caption-with-letter-spacing">
              <span>{{ article.author }}</span>
            </span>
          {% endif %}
        </header>

      {% when 'share' %}
        <div class="article-footer page-width page-width--narrow" {{ block.shopify_attributes }}>
          {% assign share_url = request.origin | append: article.url %}
          {% render 'share-button', block: block, share_link: share_url %}
        </div>

      {% when 'content' %}
  {% assign newsletter_blocks = section.blocks | where: 'type', 'newsletter' %}
  <div class="{% if newsletter_blocks.size > 0 %}article-wrap--3{% else %}article-wrap--2{% endif %}" {{ block.shopify_attributes }}>
    <aside class="article-toc">
      <h2 class="article-toc__title">{{ section.settings.toc_title }}</h2>

      <div class="toc-select-wrap is-mobile">
        <select id="article-toc-select" class="toc-select" aria-label="{{ section.settings.toc_title }}">
          <option value="">{{ section.settings.toc_title }}</option>
        </select>
        <span class="toc-select__icon" aria-hidden="true">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" role="img" focusable="false">
            <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </span>
      </div>

      {% if toc_mode_value == 'manual' %}
        <ol class="article-toc__list is-desktop" id="article-toc-list">
          {% for b in section.blocks %}
            {% if b.type == 'toc_item' %}
              <li class="article-toc__item">
                <a class="article-toc__link" href="#" data-toc-label="{{ b.settings.label | escape }}">
                  {{ b.settings.label }}
                </a>
              </li>
            {% endif %}
          {% endfor %}
        </ol>
      {% else %}
        <ol class="article-toc__list is-desktop" id="article-toc-list"></ol>
      {% endif %}
    </aside>

    <div class="article-body rte" id="article-body">
      {{ article.content }}
    </div>

    {% if newsletter_blocks.size > 0 %}
      <aside class="article-aside-right">
        {% for nb in newsletter_blocks %}
          {% assign fid = 'ArticleSubscribe-' | append: section.id | append: '-' | append: nb.id %}
          <section class="article-subscribe" {{ nb.shopify_attributes }}>
            {% if nb.settings.newsletter_heading != blank %}
              <h3 class="article-subscribe__title">{{ nb.settings.newsletter_heading }}</h3>
            {% endif %}

            <div class="article-subscribe__form-wrap">
              {%- form 'customer', id: fid, class: 'article-subscribe__form' -%}
                <input type="hidden" name="contact[tags]" value="newsletter">

                <div class="article-subscribe__input-group">
                  <input
                    id="{{ fid }}-Email"
                    type="email"
                    name="contact[email]"
                    class="article-subscribe__input"
                    value="{{ form.email }}"
                    aria-required="true"
                    autocorrect="off"
                    autocapitalize="off"
                    autocomplete="email"
                    {% if form.errors %}
                      autofocus aria-invalid="true" aria-describedby="{{ fid }}-Error"
                    {% elsif form.posted_successfully? %}
                      aria-describedby="{{ fid }}-Success"
                    {% endif %}
                    placeholder="{{ nb.settings.email_placeholder }}"
                    required
                  >
                  <button
                    type="submit"
                    class="article-subscribe__button"
                    name="commit"
                    id="{{ fid }}-Submit"
                    aria-label="{{ 'newsletter.button_label' | t }}"
                  >
                    {{ nb.settings.button_label }}
                  </button>
                </div>

                {% if form.errors %}
                  <small class="article-subscribe__msg article-subscribe__msg--error" id="{{ fid }}-Error">
                    <span class="svg-wrapper">{{ 'icon-error.svg' | inline_asset_content }}</span>
                    {{ form.errors.translated_fields.email | capitalize }} {{ form.errors.messages.email }}
                  </small>
                {% endif %}

                {% if form.posted_successfully? %}
                  <p class="article-subscribe__msg article-subscribe__msg--success" id="{{ fid }}-Success" tabindex="-1">
                    <span class="svg-wrapper">{{ 'icon-success.svg' | inline_asset_content }}</span>
                    {{ 'newsletter.success' | t }}
                  </p>
                {% endif %}
              {%- endform -%}
            </div>
          </section>
        {% endfor %}
      </aside>
    {% endif %}
  </div>
  {% when 'related' %}
  {% assign want = block.settings.max_items | default: 6 %}
  {% assign first_pass = 0 %}
  {% assign related_handles = '' %}

  {% for art in blog.articles %}
    {% if art.id != article.id and first_pass < want %}
      {% assign matched = false %}
      {% for t in article.tags %}
        {% if art.tags contains t %}
          {% assign matched = true %}
          {% break %}
        {% endif %}
      {% endfor %}
      {% if matched %}
        {% assign related_handles = related_handles | append: art.handle | append: '|' %}
        {% assign first_pass = first_pass | plus: 1 %}
      {% endif %}
    {% endif %}
  {% endfor %}

  {% assign remaining = want | minus: first_pass %}
  {% if remaining > 0 %}
    {% assign second_pass = 0 %}
    {% for art in blog.articles %}
      {% if art.id != article.id and second_pass < remaining %}
        {% unless related_handles contains art.handle %}
          {% assign related_handles = related_handles | append: art.handle | append: '|' %}
          {% assign second_pass = second_pass | plus: 1 %}
        {% endunless %}
      {% endif %}
    {% endfor %}
  {% endif %}

  {% assign related_list = related_handles | split: '|' %}
  {% assign clean_list = '' %}
  {% for h in related_list %}
    {% if h != '' %}
      {% assign clean_list = clean_list | append: h | append: '|' %}
    {% endif %}
  {% endfor %}
  {% assign clean_list = clean_list | split: '|' | uniq %}

  <section class="article-related page-width" {{ block.shopify_attributes }}>
    <h2 class="article-related__title">{{ block.settings.title | default: 'Read more:' }}</h2>

    <div class="article-related__grid">
      {% assign shown = 0 %}
      {% for h in clean_list %}
        {% if shown >= 3 %}{% break %}{% endif %}
        {% for art in blog.articles %}
          {% if art.handle == h %}
            <a class="related-card" href="{{ art.url }}">
              {% if art.image %}
                <div class="related-card__media">
                  <img src="{{ art.image | image_url: width: 720 }}" alt="{{ art.image.alt | default: art.title | escape }}">
                </div>
              {% endif %}
              <p class="related-card__date">{{ art.published_at | date: format: 'abbreviated_date' }}</p>
              <h3 class="related-card__title">{{ art.title }}</h3>
              {% if art.tags.size > 0 %}
                <p class="related-card__tags">{{ art.tags | join: ', ' }}</p>
              {% endif %}
            </a>
            {% assign shown = shown | plus: 1 %}
          {% endif %}
        {% endfor %}
      {% endfor %}
    </div>

    <div class="article-related__slider">
      <div class="swiper" data-related-swiper>
        <div class="swiper-wrapper">
          {% assign slide_count = 0 %}
          {% for h in clean_list %}
            {% if slide_count >= want %}{% break %}{% endif %}
            {% for art in blog.articles %}
              {% if art.handle == h %}
                <div class="swiper-slide">
                  <a class="related-card" href="{{ art.url }}">
                    {% if art.image %}
                      <div class="related-card__media">
                        <img src="{{ art.image | image_url: width: 900 }}" alt="{{ art.image.alt | default: art.title | escape }}">
                      </div>
                    {% endif %}
                    <p class="related-card__date">{{ art.published_at | date: format: 'abbreviated_date' }}</p>
                    <h3 class="related-card__title">{{ art.title }}</h3>
                    {% if art.tags.size > 0 %}
                      <p class="related-card__tags">{{ art.tags | join: ', ' }}</p>
                    {% endif %}
                  </a>
                </div>
                {% assign slide_count = slide_count | plus: 1 %}
              {% endif %}
            {% endfor %}
          {% endfor %}
        </div>
        <div class="swiper-pagination"></div>
      </div>
    </div>
  </section>
    {% endcase %}
  {% endfor %}

  <div class="article-template__back element-margin-top center">
    <a href="{{ blog.url }}" class="article-template__link link animate-arrow">
      <span class="icon-wrap">
        <span class="svg-wrapper">{{ 'icon-arrow.svg' | inline_asset_content }}</span>
      </span>
      {{ 'blogs.article.back_to_blog' | t: title: blog.title | escape }}
    </a>
  </div>

  {% if blog.comments_enabled? %}

  {% endif %}
</article>

<script>
  document.addEventListener('DOMContentLoaded', function () {
  const root = document.querySelector('.article-with-toc') || document;
  const bodyEl = root.querySelector('#article-body');
  const tocListEl = root.querySelector('#article-toc-list');
  const tocSelectEl = root.querySelector('#article-toc-select');

  if (!bodyEl) return;

  const includeH3 = {{ include_h3_value | json }};
  const tocMode = {{ toc_mode_value | json }};
  const modeManual = (tocMode === 'manual');

  function slugify(text) {
    const s = String(text)
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\p{L}\p{N}\s-]/gu, '')
      .trim()
      .replace(/\s+/g, '-')
      .toLowerCase();
    return s || 'section';
  }

  const selector = includeH3 ? 'h2, h3' : 'h2';
  const headings = Array.from(bodyEl.querySelectorAll(selector));

  if (headings.length === 0) {
    if (tocListEl) tocListEl.innerHTML = '';
    if (tocSelectEl) tocSelectEl.innerHTML = '';
    return;
  }

  const usedIds = new Set();
  function ensureId(el) {
    let id = el.getAttribute('id');
    if (!id || id.trim() === '') id = slugify(el.textContent || '');
    const base = id;
    let i = 2;
    while (usedIds.has(id) || document.getElementById(id)) {
      id = base + '-' + i;
      i += 1;
    }
    usedIds.add(id);
    el.setAttribute('id', id);
    return id;
  }
  headings.forEach(ensureId);

  function makeLink(id, label) {
    const a = document.createElement('a');
    a.className = 'article-toc__link';
    a.href = '#' + id;
    a.textContent = label;
    return a;
  }

  function renderAutoToc() {
    if (!tocListEl) return;
    tocListEl.innerHTML = '';
    headings.forEach(function (h) {
      const li = document.createElement('li');
      li.className = 'article-toc__item';
      const link = makeLink(h.id, (h.textContent || '').trim());
      li.appendChild(link);
      tocListEl.appendChild(li);
    });
  }

  function renderManualToc() {
    if (!tocListEl) { renderAutoToc(); return; }
    const planned = Array.from(tocListEl.querySelectorAll('[data-toc-label]'));
    if (planned.length === 0) { renderAutoToc(); return; }

    const items = [];
    planned.forEach(function (node) {
      const label = (node.getAttribute('data-toc-label') || '').trim();
      if (!label) return;
      let target = headings.find(function (h) {
        return (h.textContent || '').trim().toLowerCase() === label.toLowerCase();
      });
      if (!target) {
        target = headings.find(function (h) {
          return (h.textContent || '').toLowerCase().includes(label.toLowerCase());
        });
      }
      if (!target) return;
      const id = ensureId(target);
      items.push({ id: id, label: label });
    });

    tocListEl.innerHTML = '';
    items.forEach(function (it) {
      const li = document.createElement('li');
      li.className = 'article-toc__item';
      li.appendChild(makeLink(it.id, it.label));
      tocListEl.appendChild(li);
    });
  }

  if (modeManual) { renderManualToc(); } else { renderAutoToc(); }

  function getLinks() {
    if (!tocListEl) return [];
    return Array.from(tocListEl.querySelectorAll('a.article-toc__link'));
  }
  let links = getLinks();

  function rebuildSelectFromToc() {
    if (!tocSelectEl) return;
    links = getLinks();
    tocSelectEl.innerHTML = '';
    const placeholder = document.createElement('option');
    placeholder.value = '';
    placeholder.textContent = '{{ section.settings.toc_title }}';
    tocSelectEl.appendChild(placeholder);
    links.forEach(function (a) {
      const opt = document.createElement('option');
      opt.value = a.getAttribute('href');
      opt.textContent = a.textContent.trim();
      tocSelectEl.appendChild(opt);
    });
  }
  rebuildSelectFromToc();

  function setActiveById(id) {
    const hash = '#' + id;
    links.forEach(function (a) {
      a.classList.toggle('is-active', a.getAttribute('href') === hash);
    });
    if (tocSelectEl) tocSelectEl.value = hash;
  }

  function scrollToIdWithOffset(idOrEl) {
    const el = typeof idOrEl === 'string'
      ? document.getElementById(idOrEl.replace(/^#/, ''))
      : idOrEl;
    if (!el) return;
    const offset = Number({{ section.settings.scroll_offset | default: 100 | json }}) || 0;
    const rect = el.getBoundingClientRect();
    const absoluteY = rect.top + (window.pageYOffset || document.documentElement.scrollTop);
    const targetY = Math.max(absoluteY - offset, 0);
    (document.scrollingElement || document.documentElement).scrollTo({
      top: targetY,
      behavior: 'smooth'
    });
  }

  if (tocListEl) {
    tocListEl.addEventListener('click', function (e) {
      const a = e.target.closest('a.article-toc__link');
      if (!a) return;
      const hash = a.getAttribute('href');
      if (!hash || !hash.startsWith('#')) return;
      const id = hash.slice(1);
      const el = document.getElementById(id);
      if (!el) return;
      e.preventDefault();
      links.forEach(function (l) { l.classList.remove('is-active'); });
      a.classList.add('is-active');
      if (tocSelectEl) tocSelectEl.value = '#' + id;

      requestAnimationFrame(() => setTimeout(() => {
        scrollToIdWithOffset(id);
        history.replaceState(null, '', '#' + id);
      }, 0));
    });
  }

  function handleSelectNavigate() {
    const v = tocSelectEl.value;
    if (!v) return;
    const id = v.replace(/^#/, '');
    links.forEach(function (l) {
      l.classList.toggle('is-active', l.getAttribute('href') === ('#' + id));
    });
    tocSelectEl.blur();
    requestAnimationFrame(() => setTimeout(() => {
      scrollToIdWithOffset(id);
      history.replaceState(null, '', '#' + id);
    }, 0));
  }

  if (tocSelectEl) {
    tocSelectEl.addEventListener('change', handleSelectNavigate, { passive: true });
    tocSelectEl.addEventListener('input', handleSelectNavigate, { passive: true });
  }

  function updateActiveFromScroll() {
    const y = window.scrollY + Number({{ section.settings.scroll_offset | default: 100 | json }}) + 1;
    let currentId = headings[0].id;
    for (let i = 0; i < headings.length; i++) {
      if (headings[i].offsetTop <= y) currentId = headings[i].id; else break;
    }
    setActiveById(currentId);
  }

  let ticking = false;
  window.addEventListener('scroll', function () {
    if (ticking) return;
    window.requestAnimationFrame(function () {
      updateActiveFromScroll();
      ticking = false;
    });
    ticking = true;
  }, { passive: true });

  if (location.hash) {
    const id = location.hash.slice(1);
    const target = document.getElementById(id);
    if (target) {
      setTimeout(function () {
        scrollToIdWithOffset(id);
        setActiveById(id);
      }, 0);
    }
  } else {
    setActiveById(headings[0].id);
  }

  window.addEventListener('hashchange', function () {
    const id = location.hash.slice(1);
    const target = document.getElementById(id);
    if (target) {
      scrollToIdWithOffset(id);
      setActiveById(id);
    }
  });
});
</script>

<script>
(function () {
  function initRelatedSwipers() {
    const nodes = document.querySelectorAll('[data-related-swiper]');
    if (!nodes.length) return;

    nodes.forEach(function (el) {
      if (el.__swiper_init) return;
      el.__swiper_init = true;

      new Swiper(el, {
        slidesPerView: 1.2,
        spaceBetween: 16,
        speed: 400,
        loop: false,
        watchOverflow: true,
        observer: true,
        observeParents: true,
        pagination: {
          el: el.querySelector('.swiper-pagination'),
          clickable: true
        }
      });
    });
  }

  if (window.Swiper) {
    initRelatedSwipers();
  } else {
    window.addEventListener('load', initRelatedSwipers);
  }

  window.addEventListener('resize', function () {
    document.querySelectorAll('[data-related-swiper]').forEach(function (el) {
      if (el.swiper) el.swiper.update();
    });
  });
})();
</script>

<script type="application/ld+json">
  {{ article | structured_data }}
</script>

{% schema %}
{
  "name": "Article with TOC",
  "tag": "section",
  "class": "section",
  "settings": [
    { "type": "text", "id": "toc_title", "label": "TOC title", "default": "Content" },
    { "type": "select", "id": "toc_mode", "label": "TOC mode", "default": "auto", "options": [
      { "value": "auto", "label": "Auto (H2/H3 from content)" },
      { "value": "manual", "label": "Manual (blocks below)" }
    ]},
    { "type": "checkbox", "id": "include_h3", "label": "Include H3 in TOC", "default": true },
    { "type": "range", "id": "scroll_offset", "label": "Scroll offset (px)", "min": 0, "max": 200, "step": 5, "default": 100 }
  ],
  "blocks": [
    { "type": "@app" },
    {
      "type": "featured_image",
      "name": "Featured image",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "image_height",
          "label": "Image height",
          "default": "adapt",
          "options": [
            { "value": "adapt", "label": "Adapt to image" },
            { "value": "small", "label": "Small" },
            { "value": "medium", "label": "Medium" },
            { "value": "large", "label": "Large" }
          ]
        }
      ]
    },
    {
      "type": "title",
      "name": "Title",
      "limit": 1,
      "settings": [
        { "type": "checkbox", "id": "blog_show_date", "default": true, "label": "Show date" },
        { "type": "checkbox", "id": "blog_show_author", "default": false, "label": "Show author" }
      ]
    },
    {
      "type": "content",
      "name": "Content",
      "limit": 1
    },
    {
      "type": "share",
      "name": "Share",
      "limit": 2,
      "settings": [
        { "type": "text", "id": "share_label", "label": "Share label", "default": "Share" }
      ]
    },
    {
      "type": "toc_item",
      "name": "TOC item (manual mode)",
      "settings": [
        { "type": "text", "id": "label", "label": "Heading text (as in content)", "default": "What is biohacking?" }
      ]
    },
    {
  "type": "related",
  "name": "Read more",
  "limit": 1,
  "settings": [
    { "type": "text", "id": "title", "label": "Title", "default": "Read more:" },
    { "type": "range", "id": "max_items", "label": "Items to fetch", "min": 3, "max": 12, "step": 1, "default": 6 }
  ]
},
    {
  "type": "meta",
  "name": "Top meta",
  "limit": 1,
  "settings": [
    { "type": "checkbox", "id": "show_date", "label": "Show date", "default": true },
    { "type": "text", "id": "date_label", "label": "Date label", "default": "Date:" },
    {
      "type": "select",
      "id": "date_format",
      "label": "Date format",
      "default": "date",
      "options": [
        { "value": "date", "label": "Long date" },
        { "value": "abbreviated_date", "label": "Short date" }
      ]
    },

    { "type": "checkbox", "id": "show_categories", "label": "Show categories (tags)", "default": true },
    { "type": "text", "id": "categories_label", "label": "Categories label", "default": "Category:" },

    { "type": "range", "id": "max_tags", "label": "Max tags to show (0 = all)", "min": 0, "max": 20, "step": 1, "default": 0 },
    { "type": "text", "id": "empty_categories_fallback", "label": "If no tags", "default": "-" },

    { "type": "checkbox", "id": "show_reading_time", "label": "Show reading time", "default": true },
    { "type": "text", "id": "reading_label", "label": "Reading label", "default": "Reading time:" },
    { "type": "range", "id": "words_per_minute", "label": "Words per minute", "min": 120, "max": 300, "step": 10, "default": 200 },
    { "type": "text", "id": "minutes_suffix", "label": "Minutes suffix", "default": "min" }
  ]
},
{
  "type": "newsletter",
  "name": "Subscribe box",
  "limit": 1,
  "settings": [
    { "type": "text", "id": "newsletter_heading", "label": "Heading", "default": "Get quality content" },
    { "type": "text", "id": "email_placeholder", "label": "Email placeholder", "default": "Введіть email" },
    { "type": "text", "id": "button_label", "label": "Button label", "default": "Підпишіться" }
  ]
}


  ]
}
{% endschema %}
