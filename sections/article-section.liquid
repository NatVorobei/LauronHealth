{{ 'section-blog-post.css' | asset_url | stylesheet_tag }}

<article class="article-template article-with-toc">
  {% assign toc_mode_value = section.settings.toc_mode %}
  {% assign include_h3_value = section.settings.include_h3 %}

  {% style %}
  .article-title {
    max-width: 1160px;
    margin: 0 auto 24px auto;
    font-size: 32px;
    line-height: 1.2;
    font-weight: 700;
    color: var(--color-main-text);
    font-family: var(--font-heading-main);
  }

  .article-hero {
    max-width: 1160px;
    margin: 0 auto 24px auto;
    border-radius: 16px;
    overflow: hidden;
  }

  .article-wrap {
    max-width: 1160px;
    margin: 0 auto;
    display: flex;
    gap: 74px;
  }

  .article-toc {
    position: sticky;
    top: 60px;
    align-self: start;
  }

  .article-toc__title {
    font-size: 16px;
    font-weight: 700;
    margin: 0 0 12px 0;
    color: var(--color-main-text);
    font-family: var(--font-heading-main);
  }

  .article-toc__list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: grid;
    gap: 12px;
    border-top: 1px solid #D7D7D7;
  }
  .article-toc__item {
    padding: 16px 0;
    border-bottom: 1px solid #D7D7D7;
    max-width: 190px;
  }
  .article-toc__link {
    text-decoration: none;
    color: #87878D;
    font-size: 14px;
    line-height: 1.3;
    font-family: var(--font-heading-main);
  }
  .article-toc__link:hover,
  .article-toc__link.is-active {
    color: var(--color-main-text);
    font-weight: 600;
  }

  .article-body {
    max-width: 600px;
  }
  .article-body p {
    font-size: 16px;
    line-height: 24px;
    color: var(--color-main-text);
  }
  .article-body.rte h2 { margin-top: 28px; }
  .article-body.rte h3 { margin-top: 18px; }

  .article-footer {
    max-width: 1160px;
    margin: 24px auto 0 auto;
  }

  .article-meta {
  max-width: 1160px;
  margin: 0 auto 16px auto;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 24px;
}

.article-meta__item { }

.article-meta__label {
  font-size: 12px;
  line-height: 1.2;
  color: #9DA3AF;
  margin-bottom: 6px;
  display: block;
  font-family: var(--font-heading-main);
}

.article-meta__value {
  font-size: 14px;
  line-height: 1.3;
  color: var(--color-main-text);
}

  @media (max-width: 749px) {
    .article-title { font-size: 24px; }
    .article-wrap {
      padding: 0 10px;
      grid-template-columns: 1fr;
    }
    .article-toc {
      position: static;
      order: -1;
      margin-bottom: 16px;
    }
    .article-meta {
        padding: 0 10px;
        grid-template-columns: 1fr;
        gap: 12px;
        margin-bottom: 20px;
    }
  }
  {% endstyle %}

  {% for block in section.blocks %}
    {% case block.type %}
      {% when '@app' %}
        <div class="page-width page-width--narrow">
          {% render block %}
        </div>

      {% when 'featured_image' %}
        {% if article.image %}
          <div class="article-hero" {{ block.shopify_attributes }}>
            <img
              srcset="
                {% if article.image.width >= 350 %}{{ article.image | image_url: width: 350 }} 350w,{% endif %}
                {% if article.image.width >= 750 %}{{ article.image | image_url: width: 750 }} 750w,{% endif %}
                {% if article.image.width >= 1100 %}{{ article.image | image_url: width: 1100 }} 1100w,{% endif %}
                {% if article.image.width >= 1500 %}{{ article.image | image_url: width: 1500 }} 1500w,{% endif %}
                {% if article.image.width >= 2200 %}{{ article.image | image_url: width: 2200 }} 2200w,{% endif %}
                {% if article.image.width >= 3000 %}{{ article.image | image_url: width: 3000 }} 3000w,{% endif %}
                {{ article.image | image_url }} {{ article.image.width }}w
              "
              sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 }}px, (min-width: 750px) calc(100vw - 10rem), 100vw"
              src="{{ article.image | image_url: width: 1600 }}"
              loading="eager"
              fetchpriority="high"
              width="{{ article.image.width }}"
              height="{{ article.image.height }}"
              alt="{{ article.image.alt | default: article.title | escape }}"
              style="display:block; width:100%; height:auto;"
            >
          </div>
        {% endif %}
        {% when 'meta' %}
        <div class="article-meta page-width" {{ block.shopify_attributes }}>
            {% if block.settings.show_date %}
            <div class="article-meta__item">
                <span class="article-meta__label">{{ block.settings.date_label }}</span>
                <div class="article-meta__value">
                {{ article.published_at | time_tag: format: block.settings.date_format }}
                </div>
            </div>
            {% endif %}

            {% if block.settings.show_categories %}
            <div class="article-meta__item">
                <span class="article-meta__label">{{ block.settings.categories_label }}</span>
                <div class="article-meta__value">
                {% if article.tags.size > 0 %}
                    {% if block.settings.max_tags > 0 %}
                    {% for t in article.tags limit: block.settings.max_tags %}
                        {{- t -}}{% unless forloop.last %}, {% endunless %}
                    {% endfor %}
                    {% else %}
                    {{ article.tags | join: ', ' }}
                    {% endif %}
                {% else %}
                    {{ block.settings.empty_categories_fallback }}
                {% endif %}
                </div>
            </div>
            {% endif %}

            {% if block.settings.show_reading_time %}
            <div class="article-meta__item">
                <span class="article-meta__label">{{ block.settings.reading_label }}</span>
                <div class="article-meta__value">
                {% assign words = article.content | strip_html | replace: '&nbsp;', ' ' | split: ' ' | size %}
                {% assign wpm = block.settings.words_per_minute | default: 200 %}
                {% assign minutes = words | times: 1.0 | divided_by: wpm | ceil %}
                {% if minutes < 1 %}{% assign minutes = 1 %}{% endif %}
                {{ minutes }} {{ block.settings.minutes_suffix }}
                </div>
            </div>
            {% endif %}
        </div>
      {% when 'title' %}
        <header class="page-width page-width--narrow" {{ block.shopify_attributes }}>
          <h1 class="article-title">{{ article.title | escape }}</h1>
          {% if block.settings.blog_show_date %}
            <span class="circle-divider caption-with-letter-spacing">
              {{ article.published_at | time_tag: format: 'date' }}
            </span>
          {% endif %}
          {% if block.settings.blog_show_author %}
            <span class="caption-with-letter-spacing">
              <span>{{ article.author }}</span>
            </span>
          {% endif %}
        </header>

      {% when 'share' %}
        <div class="article-footer page-width page-width--narrow" {{ block.shopify_attributes }}>
          {% assign share_url = request.origin | append: article.url %}
          {% render 'share-button', block: block, share_link: share_url %}
        </div>

      {% when 'content' %}
        <div class="article-wrap" {{ block.shopify_attributes }}>
          <aside class="article-toc">
            <h2 class="article-toc__title">{{ section.settings.toc_title }}</h2>

            {% if toc_mode_value == 'manual' %}
              <ol class="article-toc__list" id="article-toc-list">
                {% for b in section.blocks %}
                  {% if b.type == 'toc_item' %}
                    <li class="article-toc__item">
                      <a
                        class="article-toc__link"
                        href="#"
                        data-toc-label="{{ b.settings.label | escape }}"
                      >
                        {{ b.settings.label }}
                      </a>
                    </li>
                  {% endif %}
                {% endfor %}
              </ol>
            {% else %}
              <ol class="article-toc__list" id="article-toc-list"></ol>
            {% endif %}
          </aside>

          <div class="article-body rte" id="article-body">
            {{ article.content }}
          </div>

          <div></div>
        </div>
    {% endcase %}
  {% endfor %}

  <div class="article-template__back element-margin-top center">
    <a href="{{ blog.url }}" class="article-template__link link animate-arrow">
      <span class="icon-wrap">
        <span class="svg-wrapper">{{ 'icon-arrow.svg' | inline_asset_content }}</span>
      </span>
      {{ 'blogs.article.back_to_blog' | t: title: blog.title | escape }}
    </a>
  </div>

  {% if blog.comments_enabled? %}

  {% endif %}
</article>

<script>
document.addEventListener('DOMContentLoaded', function () {
  const bodyEl = document.getElementById('article-body');
  const tocListEl = document.getElementById('article-toc-list');
  if (!bodyEl || !tocListEl) {
    return;
  }

  const includeH3 = {{ include_h3_value | json }};
  const tocMode = {{ toc_mode_value | json }};
  const modeManual = (tocMode === 'manual');
  const scrollOffset = Number({{ section.settings.scroll_offset | default: 100 | json }});

  function slugify(text) {
    const s = String(text)
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '')
      .replace(/[^\p{L}\p{N}\s-]/gu, '')
      .trim()
      .replace(/\s+/g, '-')
      .toLowerCase();
    return s || 'section';
  }

  const selector = includeH3 ? 'h2, h3' : 'h2';
  const headings = Array.from(bodyEl.querySelectorAll(selector));
  if (headings.length === 0) {
    tocListEl.innerHTML = '';
    return;
  }

  const usedIds = new Set();

  function ensureId(el) {
    let id = el.getAttribute('id');
    if (!id || id.trim() === '') {
      id = slugify(el.textContent || '');
    }
    let base = id;
    let i = 2;
    while (usedIds.has(id) || document.getElementById(id)) {
      id = base + '-' + i;
      i += 1;
    }
    usedIds.add(id);
    el.setAttribute('id', id);
    return id;
  }

  headings.forEach(function (h) { ensureId(h); });

  function makeLink(id, label) {
    const a = document.createElement('a');
    a.className = 'article-toc__link';
    a.href = '#' + id;
    a.textContent = label;
    return a;
  }

  function renderAutoToc() {
    tocListEl.innerHTML = '';
    headings.forEach(function (h) {
      const li = document.createElement('li');
      li.className = 'article-toc__item';
      const id = h.id;
      const title = (h.textContent || '').trim();
      const link = makeLink(id, title);
      li.appendChild(link);
      tocListEl.appendChild(li);
    });
  }

  function renderManualToc() {
    const planned = Array.from(tocListEl.querySelectorAll('[data-toc-label]'));
    if (planned.length === 0) {
      renderAutoToc();
      return;
    }
    const items = [];
    planned.forEach(function (node) {
      const label = (node.getAttribute('data-toc-label') || '').trim();
      if (!label) {
        return;
      }
      let target = headings.find(function (h) { return (h.textContent || '').trim().toLowerCase() === label.toLowerCase(); });
      if (!target) {
        target = headings.find(function (h) { return (h.textContent || '').toLowerCase().includes(label.toLowerCase()); });
      }
      if (!target) {
        return;
      }
      const id = ensureId(target);
      items.push({ id: id, label: label });
    });

    tocListEl.innerHTML = '';
    if (items.length === 0) {
      renderAutoToc();
      return;
    }
    items.forEach(function (it) {
      const li = document.createElement('li');
      li.className = 'article-toc__item';
      const link = makeLink(it.id, it.label);
      li.appendChild(link);
      tocListEl.appendChild(li);
    });
  }

  if (modeManual) {
    renderManualToc();
  } else {
    renderAutoToc();
  }

  function smoothScrollTo(targetY) {
    window.scrollTo({
      top: targetY,
      behavior: 'smooth'
    });
  }

  tocListEl.addEventListener('click', function (e) {
    const a = e.target.closest('a.article-toc__link');
    if (!a) {
      return;
    }
    const hash = a.getAttribute('href');
    if (!hash || !hash.startsWith('#')) {
      return;
    }
    const el = document.querySelector(hash);
    if (!el) {
      return;
    }
    e.preventDefault();
    const rect = el.getBoundingClientRect();
    const targetY = window.pageYOffset + rect.top - scrollOffset;
    smoothScrollTo(targetY);
    history.replaceState(null, '', hash);
  });

  const linkMap = new Map();
  Array.from(tocListEl.querySelectorAll('a.article-toc__link')).forEach(function (link) {
    const hash = link.getAttribute('href');
    if (hash && hash.startsWith('#')) {
      linkMap.set(hash.slice(1), link);
    }
  });

  const observer = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      const id = entry.target.id;
      const link = linkMap.get(id);
      if (!link) {
        return;
      }
      if (entry.isIntersecting) {
        link.classList.add('is-active');
      } else {
        link.classList.remove('is-active');
      }
    });
  }, {
    root: null,
    rootMargin: '-50% 0px -40% 0px',
    threshold: 0
  });

  headings.forEach(function (h) { observer.observe(h); });
});
</script>

<script type="application/ld+json">
  {{ article | structured_data }}
</script>

{% schema %}
{
  "name": "Article with TOC",
  "tag": "section",
  "class": "section",
  "settings": [
    { "type": "text", "id": "toc_title", "label": "TOC title", "default": "Content" },
    { "type": "select", "id": "toc_mode", "label": "TOC mode", "default": "auto", "options": [
      { "value": "auto", "label": "Auto (H2/H3 from content)" },
      { "value": "manual", "label": "Manual (blocks below)" }
    ]},
    { "type": "checkbox", "id": "include_h3", "label": "Include H3 in TOC", "default": true },
    { "type": "range", "id": "scroll_offset", "label": "Scroll offset (px)", "min": 0, "max": 200, "step": 5, "default": 100 }
  ],
  "blocks": [
    { "type": "@app" },
    {
      "type": "featured_image",
      "name": "Featured image",
      "limit": 1,
      "settings": [
        {
          "type": "select",
          "id": "image_height",
          "label": "Image height",
          "default": "adapt",
          "options": [
            { "value": "adapt", "label": "Adapt to image" },
            { "value": "small", "label": "Small" },
            { "value": "medium", "label": "Medium" },
            { "value": "large", "label": "Large" }
          ]
        }
      ]
    },
    {
      "type": "title",
      "name": "Title",
      "limit": 1,
      "settings": [
        { "type": "checkbox", "id": "blog_show_date", "default": true, "label": "Show date" },
        { "type": "checkbox", "id": "blog_show_author", "default": false, "label": "Show author" }
      ]
    },
    {
      "type": "content",
      "name": "Content",
      "limit": 1
    },
    {
      "type": "share",
      "name": "Share",
      "limit": 2,
      "settings": [
        { "type": "text", "id": "share_label", "label": "Share label", "default": "Share" }
      ]
    },
    {
      "type": "toc_item",
      "name": "TOC item (manual mode)",
      "settings": [
        { "type": "text", "id": "label", "label": "Heading text (as in content)", "default": "What is biohacking?" }
      ]
    },
    {
  "type": "meta",
  "name": "Top meta",
  "limit": 1,
  "settings": [
    { "type": "checkbox", "id": "show_date", "label": "Show date", "default": true },
    { "type": "text", "id": "date_label", "label": "Date label", "default": "Date:" },
    {
      "type": "select",
      "id": "date_format",
      "label": "Date format",
      "default": "date",
      "options": [
        { "value": "date", "label": "Long date" },
        { "value": "abbreviated_date", "label": "Short date" }
      ]
    },

    { "type": "checkbox", "id": "show_categories", "label": "Show categories (tags)", "default": true },
    { "type": "text", "id": "categories_label", "label": "Categories label", "default": "Category:" },

    { "type": "range", "id": "max_tags", "label": "Max tags to show (0 = all)", "min": 0, "max": 20, "step": 1, "default": 0 },
    { "type": "text", "id": "empty_categories_fallback", "label": "If no tags", "default": "-" },

    { "type": "checkbox", "id": "show_reading_time", "label": "Show reading time", "default": true },
    { "type": "text", "id": "reading_label", "label": "Reading label", "default": "Reading time:" },
    { "type": "range", "id": "words_per_minute", "label": "Words per minute", "min": 120, "max": 300, "step": 10, "default": 200 },
    { "type": "text", "id": "minutes_suffix", "label": "Minutes suffix", "default": "min" }
  ]
}

  ]
}
{% endschema %}
