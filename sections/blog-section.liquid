<div class="kb-wrap">
  <div class="kb-nav">
    {% if section.settings.tabs_title != blank %}
      <h2 class="kb-nav__title">{{ section.settings.tabs_title }}</h2>
    {% endif %}

    {% assign tabs = section.blocks | where: 'type', 'tab' %}
    <ul class="kb-nav__list is-desktop">
      {% for tab in tabs %}
        <li class="kb-nav__item">
          <a class="kb-nav__link" href="#kb-tab-{{ tab.settings.tab_id }}">{{ tab.settings.tab_title }}</a>
        </li>
      {% endfor %}
    </ul>

    <div class="kb-nav__select is-mobile">
      <select class="kb-select" onchange="if(this.value) location.href=this.value">
        {% for tab in tabs %}
          <option value="#kb-tab-{{ tab.settings.tab_id }}">{{ tab.settings.tab_title }}</option>
        {% endfor %}
      </select>
      <span class="kb-select__icon">{{ 'faqs-caret.svg' | inline_asset_content }}</span>
    </div>
  </div>

  <div class="kb-content">
    {% for tab in tabs %}
      {% assign cards = section.blocks
        | where: 'type', 'post_card'
        | where: 'settings.parent_tab', tab.settings.tab_id
      %}
      <section id="kb-tab-{{ tab.settings.tab_id }}" class="kb-tab" data-tab="{{ tab.settings.tab_id }}">
        {% if tab.settings.tab_title != blank %}
          <h3 class="kb-content__title">{{ tab.settings.tab_title }}</h3>
        {% endif %}

        <div class="kb-grid" data-per-page="4">
          {% for card in cards %}
            <a
              class="kb-card"
              href="{{ card.settings.article_url | default: '#' }}"
              aria-label="{{ card.settings.title | escape }}"
            >
              {% if card.settings.image != blank %}
                <div class="kb-card__media">
                  <img
                    src="{{ card.settings.image | img_url: '800x' }}"
                    alt="{{ card.settings.title | escape }}"
                    loading="lazy"
                  >
                </div>
              {% endif %}

              <div class="kb-card__body">
                {% if card.settings.title != blank %}
                  <h4 class="kb-card__title">{{ card.settings.title }}</h4>
                {% endif %}
                {% if card.settings.text != blank %}
                  <p class="kb-card__text">{{ card.settings.text }}</p>
                {% endif %}
              </div>
            </a>
          {% endfor %}
        </div>

        <nav class="kb-pagination" aria-label="Pagination" hidden></nav>
      </section>
    {% endfor %}
  </div>
</div>

<script>
  (function () {
    document.querySelectorAll('.kb-nav__link').forEach((link) => {
      link.addEventListener('click', function (e) {
        const target = document.querySelector(this.getAttribute('href'));
        if (!target) return;
        e.preventDefault();
        const offset = 100;
        const top = target.getBoundingClientRect().top + window.pageYOffset - offset;
        window.scrollTo({ top, behavior: 'smooth' });
        history.replaceState(null, '', this.getAttribute('href'));
      });
    });

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.getAttribute('id');
          if (entry.isIntersecting) {
            document
              .querySelectorAll('.kb-nav__link')
              .forEach((a) => a.classList.toggle('is-active', a.getAttribute('href') === '#' + id));
            const select = document.querySelector('.kb-select');
            if (select) select.value = '#' + id;
          }
        });
      },
      { rootMargin: '-40% 0px -55% 0px', threshold: 0 }
    );

    document.querySelectorAll('.kb-tab').forEach((sec) => observer.observe(sec));

    function buildPagination(container, perPage) {
      const cards = Array.from(container.querySelectorAll('.kb-card'));
      const pagination = container.parentElement.querySelector('.kb-pagination');
      perPage = Number(container.dataset.perPage || perPage || 4);
      const pages = Math.ceil(cards.length / perPage);

      function renderPage(page) {
        const start = (page - 1) * perPage;
        const end = start + perPage;
        cards.forEach((el, idx) => {
          el.style.display = idx >= start && idx < end ? '' : 'none';
        });
        if (pages <= 1) {
          pagination.hidden = true;
          pagination.innerHTML = '';
          return;
        }
        pagination.hidden = false;
        let html = '';
        html += `<button class="kb-page kb-page--prev" data-page="${Math.max(1, page - 1)}" aria-label="Prev" ${
          page === 1 ? 'disabled' : ''
        }>&lsaquo;</button>`;
        for (let i = 1; i <= pages; i++) {
          html += `<button class="kb-page ${i === page ? 'is-current' : ''}" data-page="${i}">${i}</button>`;
        }
        html += `<button class="kb-page kb-page--next" data-page="${Math.min(pages, page + 1)}" aria-label="Next" ${
          page === pages ? 'disabled' : ''
        }>&rsaquo;</button>`;
        pagination.innerHTML = html;
      }

      renderPage(1);

      pagination.addEventListener('click', (e) => {
        const btn = e.target.closest('.kb-page');
        if (!btn) return;
        const targetPage = Number(btn.dataset.page);
        renderPage(targetPage);

        const section = container.closest('.kb-tab');
        const offset = 100;
        const top = section.getBoundingClientRect().top + window.pageYOffset - offset;
        window.scrollTo({ top, behavior: 'smooth' });
      });
    }

    document.querySelectorAll('.kb-grid').forEach((grid) => buildPagination(grid, 4));

    const initialHash = location.hash;
    if (initialHash && document.querySelector(initialHash)) {
      const offset = 100;
      const top = document.querySelector(initialHash).getBoundingClientRect().top + window.pageYOffset - offset;
      setTimeout(() => window.scrollTo({ top, behavior: 'smooth' }), 0);
      const select = document.querySelector('.kb-select');
      if (select) select.value = initialHash;
    }
  })();
</script>

<style>
  .kb-wrap {
    max-width: 1160px;
    margin: 0 auto;
    display: flex;
    gap: 40px;
    justify-content: space-between;
  }
  .kb-nav {
    position: sticky;
    top: 60px;
    align-self: flex-start;
  }
  .kb-content {
    max-width: 736px;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 60px;
  }
  .kb-nav__title,
  .kb-content__title {
    font-size: 28px;
    line-height: 1.2;
    font-weight: 700;
    color: var(--color-main-text);
    font-family: var(--font-heading-main);
    margin-bottom: 24px;
  }
  .kb-nav__list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
  }
  .kb-nav__item {
    min-width: 300px;
    padding: 16px 0;
    border-bottom: 1px solid #D7D7D7;
  }
  .kb-nav__item:first-child {
    border-top: 1px solid #D7D7D7;
  }
  .kb-nav__link {
    text-decoration: none;
    background: none;
    border: 0;
    color: #87878D;
    font-size: 16px;
    line-height: 16px;
    font-family: var(--font-heading-main);
    transition: color .2s ease, font-weight .2s ease;
  }
  .kb-nav__link:hover,
  .kb-nav__link.is-active {
    color: var(--color-main-text);
    font-weight: 600;
  }
  .is-desktop { display: block; }
  .is-mobile  { display: none; }
  .kb-nav__select { position: relative; }
  .kb-select {
    width: 100%;
    padding: 12px 40px 12px 12px;
    font-size: 14px;
    line-height: 16px;
    font-family: var(--font-heading-main);
    border: 1px solid #D7D7D7;
    border-radius: 16px;
    background: #fff;
    color: #87878D;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
  }
  .kb-select__icon {
    position: absolute;
    right: 16px;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    display: inline-flex;
    align-items: center;
  }

  /* Cards */
  .kb-grid {
    display: grid;
    gap: 28px;
  }
  .kb-card {
    display: grid;
    grid-template-columns: 1fr;
    gap: 14px;
    text-decoration: none;
    background: #fff;
    border: 1px solid #EDEDED;
    border-radius: 16px;
    padding: 14px;
    transition: transform .2s ease, box-shadow .2s ease;
  }
  .kb-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 24px rgba(0,0,0,.06);
  }
  .kb-card__media {
    width: 100%;
    overflow: hidden;
    border-radius: 12px;
  }
  .kb-card__media img {
    display: block;
    width: 100%;
    height: auto;
    border-radius: 12px;
  }
  .kb-card__title {
    font-size: 18px;
    line-height: 1.3;
    font-weight: 700;
    color: var(--color-main-text);
    margin: 2px 0 6px;
  }
  .kb-card__text {
    font-size: 14px;
    line-height: 20px;
    color: var(--color-main-text);
    opacity: .85;
    margin: 0;
  }
  .kb-pagination {
    display: flex;
    align-items: center;
    gap: 6px;
    justify-content: center;
    margin-top: 8px;
    user-select: none;
  }
  .kb-page {
    min-width: 34px;
    height: 34px;
    padding: 0 10px;
    border-radius: 10px;
    border: 1px solid #D7D7D7;
    background: #fff;
    font-size: 14px;
    line-height: 32px;
    cursor: pointer;
  }
  .kb-page.is-current {
    background: #111;
    color: #fff;
    border-color: #111;
  }
  .kb-page[disabled] {
    opacity: .5;
    cursor: not-allowed;
  }

  @media screen and (max-width: 749px) {
    .kb-wrap {
      padding: 0 10px;
      flex-direction: column;
    }
    .kb-nav { position: static; top: auto; }
    .kb-nav__title,
    .kb-content__title { font-size: 20px; line-height: 16px; }
    .is-desktop { display: none; }
    .is-mobile  { display: block; margin-bottom: 24px; }
  }
</style>

{% schema %}
{
  "name": "KB Tabs with Cards",
  "settings": [
    {
      "type": "text",
      "id": "tabs_title",
      "label": "Sidebar title",
      "default": "Category"
    }
  ],
  "blocks": [
    {
      "type": "tab",
      "name": "Tab (category)",
      "settings": [
        { "type": "text", "id": "tab_id", "label": "Tab ID (slug, unique)", "default": "health" },
        { "type": "text", "id": "tab_title", "label": "Tab title", "default": "Health" }
      ]
    },
    {
      "type": "post_card",
      "name": "Post card",
      "settings": [
        { "type": "text", "id": "parent_tab", "label": "Parent Tab ID (match Tab ID)", "default": "health" },
        { "type": "image_picker", "id": "image", "label": "Image" },
        { "type": "text", "id": "title", "label": "Title", "default": "Medical study of the effect of Lauron" },
        {
          "type": "textarea",
          "id": "text",
          "label": "Short text",
          "default": "A short preview of the article text goes here..."
        },
        { "type": "url", "id": "article_url", "label": "Article link" }
      ]
    }
  ],
  "presets": [{ "name": "KB Tabs with Cards" }]
}
{% endschema %}
