{{ 'collapsible-content-with-image.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<div class="color-{{ section.settings.color_scheme }} gradient collapsible-content-with-image isolate content-container page-width">
  <div class="collapsible-content-with-image__container section-{{ section.id }}-padding">
    {% assign last_block = section.blocks | last %}
    <div class="collapsible-content-with-image__wrapper {% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}" style="border-color: {{last_block.settings.background_color}}">
      {% assign group_name = 'accordion-' | append: section.id %}
      {% for block in section.blocks %}
        {% assign input_id = 'accordion-input-' | append: block.id | append: '-' | append: section.id %}
        <div class="collapsible-content-with-image__accordion" style="background-color: {{ block.settings.background_color }}; color: {{ block.settings.text_color }}; z-index: {{ 0 | minus: forloop.index0 }};" {{ block.shopify_attributes }}>
          
          <input
            type="radio"
            name="{{ group_name }}"
            id="{{ input_id }}"
            class="accordion__radio"
            {% if section.settings.open_first_collapsible_row and forloop.first %}
              checked
            {% endif %}
            hidden
          />
          
          <label
            class="accordion__label"
            for="{{ input_id }}"
          >
            <h3 class="label__index"  style=" color: {{ block.settings.text_color }};">{% if forloop.index < 10 %}{{ "0" | append: forloop.index }}{% else %}{{ forloop.index }}{% endif %}</h3>
            <div class="label__title__container">
              <h3 class="label__title" style=" color: {{ block.settings.text_color }};">
                {{ block.settings.heading | default: block.settings.page.title | escape }}
              </h3>
              <div class="accordion__close"  style=" color: {{ block.settings.text_color }};">
                <svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <g clip-path="url(#clip0_1119_4179)">
                    <path d="M14.9999 0C6.72896 0 0 6.72896 0 14.9999C0 23.2709 6.72896 29.9999 14.9999 29.9999C23.2709 29.9999 29.9999 23.271 29.9999 14.9999C29.9999 6.72891 23.2709 0 14.9999 0ZM14.9999 28.1249C7.76285 28.1249 1.875 22.237 1.875 14.9999C1.875 7.76285 7.76285 1.875 14.9999 1.875C22.237 1.875 28.1249 7.76279 28.1249 14.9999C28.1249 22.237 22.237 28.1249 14.9999 28.1249ZM23.3203 14.9999C23.3203 15.5177 22.9005 15.9374 22.3828 15.9374H15.9374V22.3828C15.9374 22.9005 15.5177 23.3203 14.9999 23.3203C14.4822 23.3203 14.0624 22.9005 14.0624 22.3828V15.9374H7.61713C7.09939 15.9374 6.67963 15.5177 6.67963 14.9999C6.67963 14.4821 7.09939 14.0624 7.61713 14.0624H14.0624V7.61713C14.0624 7.09934 14.4822 6.67963 14.9999 6.67963C15.5177 6.67963 15.9374 7.09934 15.9374 7.61713V14.0624H22.3828C22.9005 14.0624 23.3203 14.4822 23.3203 14.9999Z" fill="currentColor"/>
                  </g>
                  <defs>
                    <clipPath id="clip0_1119_4179">
                      <rect width="30" height="30" fill="white"/>
                    </clipPath>
                  </defs>
                </svg>
              </div>
            </div>
          </label>

          <div
            class="accordion__content"
            id="CollapsibleAccordion-{{ block.id }}-{{ section.id }}"
            role="region"
            aria-labelledby="{{ input_id }}"
          >
            <div class="content__container">            
              {%- if block.settings.image != blank -%}
                <div class="content__media__container">
                  <div
                    class="content__media media gradient"
                  >
                    {%- liquid
                      assign padding_multiplier = 1
                      assign desktop_tablet_padding = 100 | times: padding_multiplier | append: 'px'
                      assign mobile_padding = 30 | times: padding_multiplier | append: 'px'
                    -%}
                    {%- capture sizes -%}
                      (min-width: {{ settings.page_width }}px) calc(({{ settings.page_width }}px - {{ desktop_tablet_padding }}) / 2),
                      (min-width: 750px) calc((100vw - {{ desktop_tablet_padding }}) / 2),
                      calc(100vw - {{ mobile_padding }})
                    {%- endcapture -%}
                    {{
                      block.settings.image
                      | image_url: width: 3200
                      | image_tag:
                        sizes: sizes,
                        widths: '50, 75, 100, 150, 200, 300, 400, 500, 750, 1000, 1250, 1500, 1750, 2000, 2250, 2500, 2750, 3000, 3200'
                    }}
                  </div>
                </div>
              {% endif %}
              <div class="content__wrapper">
                <h3 class="content__title" style=" color: {{ block.settings.text_color }};">
                  {{ block.settings.heading | default: block.settings.page.title | escape }}
                </h3>
                <p class="content__text" style=" color: {{ block.settings.text_color }};">
                  {{ block.settings.row_content }}
                </p>
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<script>
  const setMinWidthForContent=() => {
    const blocks = document.querySelectorAll('.section-{{ section.id }}-padding .content__container');
    const blocksMedia = document.querySelectorAll('.section-{{ section.id }}-padding .content__media__container');
    const blocksContent = document.querySelectorAll('.section-{{ section.id }}-padding .content__wrapper');
    let maxWidth = 0;

    blocks.forEach(block => {
      const width = block.offsetWidth;
      if (width > maxWidth) {
        maxWidth = width;
      }
    });

    blocksMedia.forEach(block => {
      block.style.minWidth = maxWidth + 'px';
      block.style.maxWidth = maxWidth + 'px';
      block.style.width = maxWidth + 'px';      
    });
    
    blocksContent.forEach(block => {
      if(maxWidth <= 647){
        block.style.minWidth = maxWidth + 'px';
        block.style.maxWidth = maxWidth + 'px';
        block.style.width = maxWidth + 'px'; 
      }     
    });
  }
  setMinWidthForContent();
  window.addEventListener("resize", setMinWidthForContent);
</script>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const radios = document.querySelectorAll(".accordion__radio");

    radios.forEach((radio) => {
      const label = radio.closest(".collapsible-content-with-image__accordion").querySelector(".accordion__label");

      label.addEventListener("click", (e) => {
        const alreadyChecked = radio.checked;
        if (alreadyChecked) return;

        const activeRadio = document.querySelector(".accordion__radio:checked");
        if (activeRadio) {
          activeRadio.checked = false;
        }

        setTimeout(() => {
          radio.checked = true;
        }, 250);

        e.preventDefault();
      });
    });
  });
</script>


{% schema %}
{
  "name": "Collapsible content+image",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "header",
      "content": "t:sections.collapsible_content.settings.layout_header.content"
    },    
    {
      "type": "select",
      "id": "layout",
      "label": "t:sections.collapsible_content.settings.layout.label",
      "options": [
        {
          "value": "none",
          "label": "t:sections.collapsible_content.settings.layout.options__1.label"
        },
        {
          "value": "row",
          "label": "t:sections.collapsible_content.settings.layout.options__2.label"
        },
        {
          "value": "section",
          "label": "t:sections.collapsible_content.settings.layout.options__3.label"
        }
      ],
      "default": "none"
    },
    {
      "type": "color_scheme",
      "id": "container_color_scheme",
      "label": "t:sections.collapsible_content.settings.container_color_scheme.label",
      "default": "scheme-2"
    },    
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.collapsible_content.settings.section_color_scheme.label",
      "default": "scheme-1"
    },
    {
      "type": "checkbox",
      "id": "open_first_collapsible_row",
      "default": true,
      "label": "t:sections.collapsible_content.settings.open_first_collapsible_row.label"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "blocks": [
    {
      "type": "collapsible_row",
      "name": "t:sections.collapsible_content.blocks.collapsible_row.name",
      "settings": [
        {
          "type": "text",
          "id": "heading",
          "default": "t:sections.collapsible_content.blocks.collapsible_row.settings.heading.default",
          "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.heading.label"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "row_content",
          "label": "t:sections.collapsible_content.blocks.collapsible_row.settings.row_content.label"
        },
        {
          "type": "color",
          "id": "background_color",
          "label": "Background color",
          "default": "#ffffff"
        },
        {
          "type": "color",
          "id": "text_color",
          "label": "Text color",
          "default": "#000000"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collapsible content+image",
      "blocks": [
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        },
        {
          "type": "collapsible_row"
        }
      ]
    }
  ]
}
{% endschema %}