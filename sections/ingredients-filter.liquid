{% comment %}
  {%- assign scope = section.settings.scope | default: 'ingredients' | strip -%}

  <div class="filters2rows" data-scope="{{ scope }}" id="filters-{{ section.id }}" style="
      padding-top: {{ section.settings.padding_top_desktop | default: 0 }}px;
      padding-bottom: {{ section.settings.padding_bottom_desktop | default: 0 }}px;
    ">
    <div class="filters2rows__row filters2rows__row--products">
      {%- for block in section.blocks -%}
        {%- if block.type == 'product_button' -%}
          <button
            class="filters2rows__btn js-filter-btn{% if block.settings.default_active %} is-active{% endif %}"
            data-type="product"
            data-value="{{ block.settings.handle | downcase | strip }}"
            aria-pressed="{% if block.settings.default_active %}true{% else %}false{% endif %}">
            {{ block.settings.label }}
          </button>
        {%- endif -%}
      {%- endfor -%}
    </div>

    <div class="filters2rows__row filters2rows__row--tags">
      {%- for block in section.blocks -%}
        {%- if block.type == 'tag_button' -%}
          <button
            class="filters2rows__btn filterTab__btn js-filter-btn{% if block.settings.default_active %} is-active{% endif %}"
            data-type="tag"
            data-value="{{ block.settings.handle | downcase | strip }}"
            aria-pressed="{% if block.settings.default_active %}true{% else %}false{% endif %}">
            {{ block.settings.label }}
          </button>
        {%- endif -%}
      {%- endfor -%}
    </div>
  </div>

  <style>
    .filters2rows {
      max-width: 1280px;
      margin: 0 auto;
      {% comment %} padding: 0 10px; {% endcomment %}
      display: flex;
      flex-direction: column;
      gap: 45px;
    }
    .filters2rows__row {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
    }
    .filters2rows__btn {
      padding: 20px;
      border-radius: 20px;
      border: 1px solid #D7D7D7;
      background: #fff;
      cursor: pointer;
      font-size: 14px;
      font-weight: 700;
      line-height: 12px;
      font-family: var(--font-heading-main);
      color: var(--color-main-text);
      transition: background-color .15s ease, color .15s ease, border-color .15s ease;
    }
    .filters2rows__btn.filterTab__btn {
      padding: 13px 20px;
      border-radius: 16px;
    }
    .filters2rows__btn.is-active {
      background: var(--color-main-text);
      color: #fff;
      border-color: var(--color-main-text);
      font-weight: 600;
    }

    @media(max-width: 1240px) {
      .filters2rows {
        padding: 0 10px;
      }
    }

    @media (max-width: 749px) {
      .filters2rows {
          padding-top: {{ section.settings.padding_top_mobile | default: 0 }}px !important;
          padding-bottom: {{ section.settings.padding_bottom_mobile | default: 0 }}px !important;
        }
      .filters2rows__btn {
        font-size: 12px;
        padding: 8px 12px;
      }
    }
  </style>

  <script>
  (function(){
    const root = document.getElementById('filters-{{ section.id }}');
    if (!root) return;

    const scope = root.dataset.scope || 'ingredients';
    const tagsSelectMode = "{{ section.settings.tags_select_mode }}";

    let activeProduct = 'all';
    let activeTags = new Set();

    const qs = (sel, ctx=document)=>ctx.querySelector(sel);
    const qsa = (sel, ctx=document)=>Array.from(ctx.querySelectorAll(sel));
    const parseCSV = s => (s||'').split(',').map(v=>v.trim().toLowerCase()).filter(Boolean);

    const cardsSelector = `[data-scope="${scope}"] .benefits-card, [data-scope="${scope}"] .ingredients-card`;
    const allCards = ()=> qsa(cardsSelector);

    const productBtns = qsa('.js-filter-btn[data-type="product"]', root);
    const tagBtns = qsa('.js-filter-btn[data-type="tag"]', root);

    const prodDefault = productBtns.find(b => b.classList.contains('is-active'));
    if (prodDefault) activeProduct = prodDefault.dataset.value || 'all';
    else productBtns.find(b => (b.dataset.value||'')==='all')?.classList.add('is-active');

    tagBtns.filter(b => b.classList.contains('is-active'))
           .forEach(b => { const v=b.dataset.value; if(v && v!=='all') activeTags.add(v); });
    if (activeTags.size===0) tagBtns.find(b => (b.dataset.value||'')==='all')?.classList.add('is-active');

    function applyFilters(){
      allCards().forEach(card => {
        const products = parseCSV(card.dataset.products);
        const tags = parseCSV(card.dataset.tags);

        const productOK = (activeProduct === 'all') || products.includes(activeProduct);
        {% comment %} const tagsOK = (activeTags.size === 0) || ([...activeTags].every(t => tags.includes(t))); {% endcomment %}
        const tagsOK = (activeTags.size === 0) || ([...activeTags].some(t => tags.includes(t)));

        {% comment %} card.style.display = (productOK && tagsOK) ? '' : 'none'; {% endcomment %}
        const visible = (productOK && tagsOK);
        card.toggleAttribute('hidden', !visible);
      });
    }

    function onProductClick(btn){
      activeProduct = btn.dataset.value || 'all';
      productBtns.forEach(b => b.classList.toggle('is-active', b===btn));
      applyFilters();
    }

    function onTagClick(btn){
      const value = btn.dataset.value || '';
      const isAll = (value === 'all');

      if (tagsSelectMode === 'single') {
        tagBtns.forEach(b => b.classList.remove('is-active'));
        activeTags.clear();
        if (!isAll) {
          btn.classList.add('is-active');
          activeTags.add(value);
        } else {
          tagBtns.find(b => (b.dataset.value||'')==='all')?.classList.add('is-active');
        }
      } else {
        if (isAll) {
          activeTags.clear();
          tagBtns.forEach(b => b.classList.toggle('is-active', (b.dataset.value||'')==='all'));
        } else {
          const nowOn = !btn.classList.contains('is-active');
          btn.classList.toggle('is-active', nowOn);
          if (nowOn) activeTags.add(value); else activeTags.delete(value);
          const allBtn = tagBtns.find(b => (b.dataset.value||'')==='all');
          if (allBtn) allBtn.classList.toggle('is-active', activeTags.size===0);
        }
      }

      applyFilters();
    }

    root.addEventListener('click', (e)=>{
      const btn = e.target.closest('.js-filter-btn');
      if (!btn) return;
      const type = btn.dataset.type;
      if (type==='product') onProductClick(btn);
      if (type==='tag') onTagClick(btn);
    });

    applyFilters();
  })();
  </script>

  <script>
  (function(){
    if (window.__globalCardFlipBound) return;
    window.__globalCardFlipBound = true;

    document.addEventListener('click', function(e){
      const card = e.target.closest('.ingredients-card');
      if (!card) return;
      card.classList.toggle('flipped');
    });
  })();
  </script>


  {% schema %}
  {
    "name": "Filters (2 rows)",
    "settings": [
      {
        "type": "text",
        "id": "scope",
        "label": "Scope (data-scope)",
        "default": "ingredients",
        "info": "Такий самий data-scope має бути на обгортці гріда(ів), які треба фільтрувати."
      },
      {
        "type": "select",
        "id": "tags_select_mode",
        "label": "Режим вибору тегів",
        "default": "multi",
        "options": [
          { "value": "multi", "label": "Multi-select" },
          { "value": "single", "label": "Single-select" }
        ]
      },
      {
          "type": "range",
          "id": "padding_top_desktop",
          "label": "Padding зверху (десктоп)",
          "default": 40,
          "min": 0,
          "max": 160,
          "step": 4,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "padding_bottom_desktop",
          "label": "Padding знизу (десктоп)",
          "default": 0,
          "min": 0,
          "max": 160,
          "step": 4,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "padding_top_mobile",
          "label": "Padding зверху (мобілка)",
          "default": 0,
          "min": 0,
          "max": 160,
          "step": 4,
          "unit": "px"
        },
        {
          "type": "range",
          "id": "padding_bottom_mobile",
          "label": "Padding знизу (мобілка)",
          "default": 0,
          "min": 0,
          "max": 160,
          "step": 4,
          "unit": "px"
        }
    ],
    "blocks": [
      {
        "type": "product_button",
        "name": "Product button",
        "settings": [
          { "type": "text", "id": "handle", "label": "Handle (value)", "info": "напр.: all, freeze-age, mental-performance" },
          { "type": "text", "id": "label", "label": "Label", "default": "Button" },
          { "type": "checkbox", "id": "default_active", "label": "Active by default", "default": false }
        ]
      },
      {
        "type": "tag_button",
        "name": "Tag button",
        "settings": [
          { "type": "text", "id": "handle", "label": "Handle (value)", "info": "напр.: all, vitamins, minerals, botanicals, bioactive, polysaccharides" },
          { "type": "text", "id": "label", "label": "Label", "default": "Button" },
          { "type": "checkbox", "id": "default_active", "label": "Active by default", "default": false }
        ]
      }
    ],
    "presets": [
      { "name": "Filters (2 rows)" }
    ]
  }
  {% endschema %}
{% endcomment %}

{%- assign scope = section.settings.scope | default: 'ingredients' | strip -%}

<div
  class="filters2rows"
  data-scope="{{ scope }}"
  id="filters-{{ section.id }}"
  data-tags-default-label="{{ section.settings.mobile_tags_title | default: 'All ingredients' | escape }}"
  style="
    padding-top: {{ section.settings.padding_top_desktop | default: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom_desktop | default: 0 }}px;
  "
>
  {% if section.settings.heading != blank %}
    <div class="filters2rows__heading">{{ section.settings.heading }}</div>
  {% endif %}

  <button class="filters2rows__acc" data-target="products" aria-expanded="false">
    <span class="filters2rows__acc-text">{{ section.settings.mobile_products_title | default: 'Products' }}</span>
    <svg class="filters2rows__acc-icon" width="16" height="16" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>

  <div class="filters2rows__row filters2rows__row--products">
    {%- for block in section.blocks -%}
      {%- if block.type == 'product_button' -%}
        <button
          class="filters2rows__btn js-filter-btn{% if block.settings.default_active %} is-active{% endif %}"
          data-type="product"
          data-value="{{ block.settings.handle | downcase | strip }}"
          aria-pressed="{% if block.settings.default_active %}true{% else %}false{% endif %}"
        >
          {{ block.settings.label }}
        </button>
      {%- endif -%}
    {%- endfor -%}
  </div>

  <button class="filters2rows__acc filters2rows__acc-tags" data-target="tags" aria-expanded="false">
    <span class="filters2rows__acc-text">{{ section.settings.mobile_tags_title | default: 'All ingredients' }}</span>
    <svg class="filters2rows__acc-icon" width="16" height="16" viewBox="0 0 24 24" aria-hidden="true">
      <path d="M6 9l6 6 6-6" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  </button>

  <div class="filters2rows__row filters2rows__row--tags">
    {%- for block in section.blocks -%}
      {%- if block.type == 'tag_button' -%}
        <button
          class="filters2rows__btn filterTab__btn js-filter-btn{% if block.settings.default_active %} is-active{% endif %}"
          data-type="tag"
          data-value="{{ block.settings.handle | downcase | strip }}"
          aria-pressed="{% if block.settings.default_active %}true{% else %}false{% endif %}"
        >
          {{ block.settings.label }}
        </button>
      {%- endif -%}
    {%- endfor -%}
  </div>
</div>

<style>
  .ingredients-grid-wrapper:not(:has(.ingredients-card:not([hidden]))),
  .benefits-grid-wrapper:not(:has(.benefits-card:not([hidden]))) {
    display: none !important;
  }

  .filters2rows {
    max-width: 1280px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 45px;
  }
  .filters2rows__heading {
    font-weight: 700;
    font-size: 20px;
    line-height: 1.3;
  }
  .filters2rows__row {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  .filters2rows__btn {
    padding: 20px;
    border-radius: 20px;
    border: 1px solid #D7D7D7;
    background: #fff;
    cursor: pointer;
    font-size: 14px;
    font-weight: 700;
    line-height: 12px;
    font-family: var(--font-heading-main);
    transition: background-color .15s ease, color .15s ease, border-color .15s ease;
  }
  .filters2rows__btn.filterTab__btn {
    padding: 13px 20px;
    border-radius: 16px;
  }
  .filters2rows__btn.is-active {
    background: var(--color-main-text);
    color: #fff;
    border-color: var(--color-main-text);
    font-weight: 600;
  }

  .filters2rows__acc {
    display: none;
    width: 100%;
    align-items: center;
    justify-content: space-between;
    gap: 12px;
    padding: 14px 16px;
    border: 1px solid #D7D7D7;
    background: #fff;
    border-radius: 20px;
    font-family: var(--font-heading-main);
    font-weight: 700;
    font-size: 14px;
    line-height: 1;
    cursor: pointer;
  }
  .filters2rows__acc-icon { 
    transition: transform .2s ease; 
  }
  .filters2rows__acc[aria-expanded="true"] .filters2rows__acc-icon { 
    transform: rotate(180deg); 
  }

  @media (max-width: 1240px) {
    .filters2rows { 
      padding: 0 10px; 
    }
  }

  @media (max-width: 749px) {
    .filters2rows {
      padding-top: {{ section.settings.padding_top_mobile | default: 0 }}px !important;
      padding-bottom: {{ section.settings.padding_bottom_mobile | default: 0 }}px !important;
    }
    .filters2rows {
      gap: 0;
    }
    .filters2rows__acc { 
      display: flex; 
    }
    .filters2rows__acc-tags {
      margin-top: 12px;
    }
    .filters2rows__row {
      display: none;
      padding: 0;
      gap: 0;
      flex-wrap: nowrap;
      flex-direction: column;
    }
    .filters2rows__acc[aria-expanded="true"]{
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
      border-bottom-color: transparent;
    }
    .filters2rows__acc[aria-expanded="true"] + .filters2rows__row {
      display: block;
      border: 1px solid #D7D7D7;
      border-top: 0;
      border-bottom-left-radius: 20px;
      border-bottom-right-radius: 20px;
      padding: 12px 16px;
      background: #fff;
    }

    .filters2rows__row .filters2rows__btn {
      display: flex;
      width: 100%;
      padding: 12px 0;
      background: transparent;
      border: 0;
      border-radius: 0;
      font-size: 14px;
      line-height: 1.35;
      font-weight: 700;
      color: var(--color-main-text);
      justify-content: space-between;
      align-items: center;
    }
    .filters2rows__row .filters2rows__btn + .filters2rows__btn {
      border-top: 1px solid #EFEFEF;
    }

    .filters2rows__row .filters2rows__btn.is-active {

    }

    .filters2rows__btn.filterTab__btn { 
      padding: 12px 0; 
      border-radius: 0; 
    }
  }
</style>

<script>
  (function () {
    const root = document.getElementById('filters-{{ section.id }}');
    if (!root) return;

    const scope = root.dataset.scope || 'ingredients';
    const tagsSelectMode = '{{ section.settings.tags_select_mode }}';
    const tagsDefaultLabel = root.dataset.tagsDefaultLabel || 'All ingredients';

    let activeProduct = 'all';
    let activeTags = new Set();

    const qsa = (sel, ctx = document) => Array.from(ctx.querySelectorAll(sel));
    const parseCSV = (s) =>
      (s || '')
        .split(/[,;]+/)
        .map((v) => v.trim().toLowerCase())
        .filter(Boolean);

    const cardsSelector = `[data-scope="${scope}"] .benefits-card, [data-scope="${scope}"] .ingredients-card`;
    const allCards = () => qsa(cardsSelector);

    const productBtns = qsa('.js-filter-btn[data-type="product"]', root);
    const tagBtns = qsa('.js-filter-btn[data-type="tag"]', root);

    const accProducts = root.querySelector('.filters2rows__acc[data-target="products"]');
    const accTags = root.querySelector('.filters2rows__acc[data-target="tags"]');

    const prodDefault = productBtns.find((b) => b.classList.contains('is-active'));
    if (prodDefault) activeProduct = prodDefault.dataset.value || 'all';
    else productBtns.find((b) => (b.dataset.value || '') === 'all')?.classList.add('is-active');

    tagBtns
      .filter((b) => b.classList.contains('is-active'))
      .forEach((b) => {
        const v = b.dataset.value;
        if (v && v !== 'all') activeTags.add(v);
      });
    if (activeTags.size === 0) tagBtns.find((b) => (b.dataset.value || '') === 'all')?.classList.add('is-active');

    function applyFilters() {
      allCards().forEach((card) => {
        const products = parseCSV(card.dataset.products);
        const tags = parseCSV(card.dataset.tags);
        const productOK = activeProduct === 'all' || products.includes(activeProduct);
        const tagsOK = activeTags.size === 0 || [...activeTags].some((t) => tags.includes(t));

        const visible = productOK && tagsOK;
        card.toggleAttribute('hidden', !visible); 
      });
      updateAccordionLabels();
    }

    function onProductClick(btn) {
      activeProduct = btn.dataset.value || 'all';
      productBtns.forEach((b) => b.classList.toggle('is-active', b === btn));
      applyFilters();
    }

    function onTagClick(btn) {
      const value = btn.dataset.value || '';
      const isAll = value === 'all';

      if (tagsSelectMode === 'single') {
        tagBtns.forEach((b) => b.classList.remove('is-active'));
        activeTags.clear();
        if (!isAll) {
          btn.classList.add('is-active');
          activeTags.add(value);
        } else {
          tagBtns.find((b) => (b.dataset.value || '') === 'all')?.classList.add('is-active');
        }
      } else {
        if (isAll) {
          activeTags.clear();
          tagBtns.forEach((b) => b.classList.toggle('is-active', (b.dataset.value || '') === 'all'));
        } else {
          const nowOn = !btn.classList.contains('is-active');
          btn.classList.toggle('is-active', nowOn);
          if (nowOn) activeTags.add(value);
          else activeTags.delete(value);
          const allBtn = tagBtns.find((b) => (b.dataset.value || '') === 'all');
          if (allBtn) allBtn.classList.toggle('is-active', activeTags.size === 0);
        }
      }
      applyFilters();
    }

    function bindAccordion(btn, targetClass) {
      if (!btn) return;
      const panel = root.querySelector(`.filters2rows__row--${targetClass}`);
      btn.addEventListener('click', () => {
        const expanded = btn.getAttribute('aria-expanded') === 'true';
        btn.setAttribute('aria-expanded', String(!expanded));
      });
    }
    bindAccordion(accProducts, 'products');
    bindAccordion(accTags, 'tags');

    function updateAccordionLabels() {
      if (accProducts) {
        const activeP = productBtns.find((b) => b.classList.contains('is-active'));
        if (activeP) accProducts.querySelector('.filters2rows__acc-text').textContent = activeP.textContent.trim();
      }
      if (accTags) {
        const sel = tagBtns.filter((b) => b.classList.contains('is-active') && (b.dataset.value || '') !== 'all');
        accTags.querySelector('.filters2rows__acc-text').textContent = sel.length
          ? sel.map((b) => b.textContent.trim()).join(', ')
          : tagsDefaultLabel || 'All ingredients';
      }
    }

    root.addEventListener('click', (e) => {
      const btn = e.target.closest('.js-filter-btn');
      if (!btn || !root.contains(btn)) return;
      const type = btn.dataset.type;
      if (type === 'product') onProductClick(btn);
      if (type === 'tag') onTagClick(btn);
    });

    if (window.matchMedia('(max-width: 749px)').matches && accProducts) {
      accProducts.setAttribute('aria-expanded', 'true');
    }

    applyFilters();
  })();
</script>

{% schema %}
{
  "name": "Filters (2 rows)",
  "settings": [
    { "type": "text", "id": "heading", "label": "Заголовок (опціонально)" },
    {
      "type": "text",
      "id": "scope",
      "label": "Scope (data-scope)",
      "default": "ingredients",
      "info": "Такий самий data-scope має бути на обгортці гріда(ів), які треба фільтрувати."
    },
    {
      "type": "select",
      "id": "tags_select_mode",
      "label": "Режим вибору тегів",
      "default": "multi",
      "options": [
        { "value": "multi", "label": "Multi-select (OR)" },
        { "value": "single", "label": "Single-select" }
      ]
    },

    { "type": "text", "id": "mobile_products_title", "label": "Мобільний заголовок (Products)", "default": "Products" },
    {
      "type": "text",
      "id": "mobile_tags_title",
      "label": "Мобільний заголовок (Ingredients)",
      "default": "All ingredients"
    },

    {
      "type": "range",
      "id": "padding_top_desktop",
      "label": "Padding зверху (десктоп)",
      "default": 40,
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_bottom_desktop",
      "label": "Padding знизу (десктоп)",
      "default": 0,
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_top_mobile",
      "label": "Padding зверху (мобілка)",
      "default": 0,
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_bottom_mobile",
      "label": "Padding знизу (мобілка)",
      "default": 0,
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px"
    }
  ],
  "blocks": [
    {
      "type": "product_button",
      "name": "Product button",
      "settings": [
        {
          "type": "text",
          "id": "handle",
          "label": "Handle (value)",
          "info": "напр.: all, freeze-age, mental-performance"
        },
        { "type": "text", "id": "label", "label": "Label", "default": "Button" },
        { "type": "checkbox", "id": "default_active", "label": "Active by default", "default": false }
      ]
    },
    {
      "type": "tag_button",
      "name": "Tag button",
      "settings": [
        {
          "type": "text",
          "id": "handle",
          "label": "Handle (value)",
          "info": "напр.: all, vitamins, minerals, botanicals, bioactive, polysaccharides"
        },
        { "type": "text", "id": "label", "label": "Label", "default": "Button" },
        { "type": "checkbox", "id": "default_active", "label": "Active by default", "default": false }
      ]
    }
  ],
  "presets": [{ "name": "Filters (2 rows)" }]
}
{% endschema %}
