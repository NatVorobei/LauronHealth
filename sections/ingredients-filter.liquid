{% comment %}
  Filters (2 rows): Products (top) + Tags (bottom)
  - Add this section на сторінку один раз.
  - Вкажи однаковий data-scope у цій секції та у грідах, які потрібно фільтрувати.
  - У грідах кожна картка має:
      data-products="freeze-age,mental-performance"
      data-tags="vitamins,bioactive"
  - У цій секції просто додавай блоки:
      * Product button — попаде у верхній ряд
      * Tag button — попаде у нижній ряд
  - Кнопки "All" додаються як звичайні кнопки з handle="all" і, бажано, Active by default.
{% endcomment %}

{%- assign scope = section.settings.scope | default: 'ingredients' | strip -%}

<div class="filters2rows" data-scope="{{ scope }}" id="filters-{{ section.id }}">
  {% if section.settings.heading != blank %}
    <div class="filters2rows__heading">{{ section.settings.heading }}</div>
  {% endif %}

  <!-- Row 1: Products -->
  <div class="filters2rows__row filters2rows__row--products">
    {%- for block in section.blocks -%}
      {%- if block.type == 'product_button' -%}
        <button
          class="filters2rows__btn js-filter-btn{% if block.settings.default_active %} is-active{% endif %}"
          data-type="product"
          data-value="{{ block.settings.handle | downcase | strip }}"
          aria-pressed="{% if block.settings.default_active %}true{% else %}false{% endif %}">
          {{ block.settings.label }}
        </button>
      {%- endif -%}
    {%- endfor -%}
  </div>

  <!-- Row 2: Tags -->
  <div class="filters2rows__row filters2rows__row--tags">
    {%- for block in section.blocks -%}
      {%- if block.type == 'tag_button' -%}
        <button
          class="filters2rows__btn js-filter-btn{% if block.settings.default_active %} is-active{% endif %}"
          data-type="tag"
          data-value="{{ block.settings.handle | downcase | strip }}"
          aria-pressed="{% if block.settings.default_active %}true{% else %}false{% endif %}">
          {{ block.settings.label }}
        </button>
      {%- endif -%}
    {%- endfor -%}
  </div>
</div>

<style>
  .filters2rows {
    max-width: 1280px;
    margin: 0 auto 28px;
    padding: 0 10px;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  .filters2rows__heading {
    font-weight: 700;
    font-size: 20px;
    line-height: 1.3;
  }
  .filters2rows__row {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  .filters2rows__btn {
    padding: 10px 14px;
    border-radius: 999px;
    border: 1px solid #E2E8F0;
    background: #fff;
    cursor: pointer;
    font-size: 13px;
    line-height: 1;
    transition: background-color .15s ease, color .15s ease, border-color .15s ease;
  }
  .filters2rows__btn.is-active {
    background: #0B1C2F;
    color: #fff;
    border-color: #0B1C2F;
    font-weight: 600;
  }
  @media (max-width: 749px) {
    .filters2rows__heading { font-size: 18px; }
    .filters2rows__btn { font-size: 12px; padding: 8px 12px; }
  }
</style>

<script>
(function(){
  const root = document.getElementById('filters-{{ section.id }}');
  if (!root) return;

  const scope = root.dataset.scope || 'ingredients';
  const tagsSelectMode = "{{ section.settings.tags_select_mode }}"; // 'multi' | 'single'

  let activeProduct = 'all';
  let activeTags = new Set();

  const qs = (sel, ctx=document)=>ctx.querySelector(sel);
  const qsa = (sel, ctx=document)=>Array.from(ctx.querySelectorAll(sel));
  const parseCSV = s => (s||'').split(',').map(v=>v.trim().toLowerCase()).filter(Boolean);

  const cardsSelector = `[data-scope="${scope}"] .benefits-card, [data-scope="${scope}"] .ingredients-card`;
  const allCards = ()=> qsa(cardsSelector);

  const productBtns = qsa('.js-filter-btn[data-type="product"]', root);
  const tagBtns = qsa('.js-filter-btn[data-type="tag"]', root);

  // init default states
  const prodDefault = productBtns.find(b => b.classList.contains('is-active'));
  if (prodDefault) activeProduct = prodDefault.dataset.value || 'all';
  else productBtns.find(b => (b.dataset.value||'')==='all')?.classList.add('is-active');

  tagBtns.filter(b => b.classList.contains('is-active'))
         .forEach(b => { const v=b.dataset.value; if(v && v!=='all') activeTags.add(v); });
  if (activeTags.size===0) tagBtns.find(b => (b.dataset.value||'')==='all')?.classList.add('is-active');

  function applyFilters(){
    allCards().forEach(card => {
      const products = parseCSV(card.dataset.products);
      const tags = parseCSV(card.dataset.tags);

      const productOK = (activeProduct === 'all') || products.includes(activeProduct);
      const tagsOK = (activeTags.size === 0) || ([...activeTags].every(t => tags.includes(t)));

      card.style.display = (productOK && tagsOK) ? '' : 'none';
    });
  }

  function onProductClick(btn){
    activeProduct = btn.dataset.value || 'all';
    productBtns.forEach(b => b.classList.toggle('is-active', b===btn));
    applyFilters();
  }

  function onTagClick(btn){
    const value = btn.dataset.value || '';
    const isAll = (value === 'all');

    if (tagsSelectMode === 'single') {
      tagBtns.forEach(b => b.classList.remove('is-active'));
      activeTags.clear();
      if (!isAll) {
        btn.classList.add('is-active');
        activeTags.add(value);
      } else {
        tagBtns.find(b => (b.dataset.value||'')==='all')?.classList.add('is-active');
      }
    } else {
      if (isAll) {
        activeTags.clear();
        tagBtns.forEach(b => b.classList.toggle('is-active', (b.dataset.value||'')==='all'));
      } else {
        const nowOn = !btn.classList.contains('is-active');
        btn.classList.toggle('is-active', nowOn);
        if (nowOn) activeTags.add(value); else activeTags.delete(value);
        const allBtn = tagBtns.find(b => (b.dataset.value||'')==='all');
        if (allBtn) allBtn.classList.toggle('is-active', activeTags.size===0);
      }
    }

    applyFilters();
  }

  root.addEventListener('click', (e)=>{
    const btn = e.target.closest('.js-filter-btn');
    if (!btn) return;
    const type = btn.dataset.type;
    if (type==='product') onProductClick(btn);
    if (type==='tag') onTagClick(btn);
  });

  applyFilters();
})();
</script>

{% schema %}
{
  "name": "Filters (2 rows)",
  "settings": [
    { "type": "text", "id": "heading", "label": "Заголовок (опціонально)" },
    {
      "type": "text",
      "id": "scope",
      "label": "Scope (data-scope)",
      "default": "ingredients",
      "info": "Такий самий data-scope має бути на обгортці гріда(ів), які треба фільтрувати."
    },
    {
      "type": "select",
      "id": "tags_select_mode",
      "label": "Режим вибору тегів",
      "default": "multi",
      "options": [
        { "value": "multi", "label": "Multi-select" },
        { "value": "single", "label": "Single-select" }
      ]
    }
  ],
  "blocks": [
    {
      "type": "product_button",
      "name": "Product button",
      "settings": [
        { "type": "text", "id": "handle", "label": "Handle (value)", "info": "напр.: all, freeze-age, mental-performance" },
        { "type": "text", "id": "label", "label": "Label", "default": "Button" },
        { "type": "checkbox", "id": "default_active", "label": "Active by default", "default": false }
      ]
    },
    {
      "type": "tag_button",
      "name": "Tag button",
      "settings": [
        { "type": "text", "id": "handle", "label": "Handle (value)", "info": "напр.: all, vitamins, minerals, botanicals, bioactive, polysaccharides" },
        { "type": "text", "id": "label", "label": "Label", "default": "Button" },
        { "type": "checkbox", "id": "default_active", "label": "Active by default", "default": false }
      ]
    }
  ],
  "presets": [
    { "name": "Filters (2 rows)" }
  ]
}
{% endschema %}
