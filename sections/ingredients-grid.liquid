<div class="ingredients-grid-wrapper" data-scope="ingredients" style="
    padding-top: {{ section.settings.padding_top_desktop | default: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom_desktop | default: 0 }}px;
  ">
  <div class="ingredients-grid__header">
    {% if section.settings.title != blank %}
      <h2 class="ingredients-grid__heading">{{ section.settings.title }}</h2>
    {% endif %}
  </div>

  <div class="ingredients-grid-container">
    <div class="ingredients-grid">
      {% for block in section.blocks %}
        {% assign products_csv = block.settings.products_csv | downcase | strip %}
        {% assign tags_csv = block.settings.tags_csv | downcase | strip %}
        {% comment %} {% assign card_handle = block.settings.handle | default: block.settings.title | handleize %} {% endcomment %}

        <div
          class="ingredients-card"
          data-products="{{ products_csv }}"
          data-tags="{{ tags_csv }}"
          data-handle="{{ card_handle }}"
        >
          <div class="card-inner">
            <div class="card-face card-front">
              {% if block.settings.image != blank %}
                <img
                  src="{{ block.settings.image | image_url }}"
                  alt="{{ block.settings.title | escape }}"
                  class="card-image"
                >
              {% endif %}
              <div class="card-content">
                <h3 class="card-title">{{ block.settings.title }}</h3>
                <div class="card-description-container">
                  <div class="card-description">{{ block.settings.short_text }}</div>
                  <button class="expand-btn" aria-label="Expand">
                    {{ 'plus-icon.svg' | inline_asset_content }}
                  </button>
                </div>
              </div>
            </div>

            <div class="card-face card-back">
              <div class="card-back-content">
                <div class="card-back-content__descr">{{ block.settings.full_text }}</div>
                <button class="close-btn" aria-label="Close">
                  {{ 'exit-button.svg' | inline_asset_content }}
                </button>
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<style>
  .ingredients-grid-wrapper:not(:has(.ingredients-card:not([hidden]))),
  .benefits-grid-wrapper:not(:has(.benefits-card:not([hidden]))) {
    display: none !important;
  }

  .ingredients-grid-wrapper {
    max-width: 1280px;
    margin: 0 auto;
  }

  .ingredients-grid__header {
    display: flex;
    flex-direction: column;
    gap: 30px;
    padding-right: 10px;
    padding-left: 50px;
    margin-bottom: 60px;
  }

  .ingredients-grid__heading {
    font-size: 42px;
    font-weight: 700;
    margin: 0;
    line-height: 30px;
    font-family: var(--font-heading-main);
  }

  .ingredients-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
    align-items: stretch;
    justify-items: stretch;
  }

  .ingredients-card {
    perspective: 1400px;
    position: relative;
    min-height: 360px;
    flex: 1 0 calc(25% - 20px);
    cursor: pointer;
  }

  .ingredients-grid-wrapper,
  .ingredients-grid-container,
  .ingredients-grid,
  .ingredients-card {
    overflow: visible !important;
  }

  .card-inner {
    width: 100%;
    height: 100%;
    position: relative;
    transform-style: preserve-3d;
    will-change: transform;
  }

  .card-face {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 20px;
    overflow: hidden;
    backface-visibility: hidden;
    transition: transform 0.6s ease;
    display: flex;
    flex-direction: column;
    background: #F0F4F5;
    transition: transform .75s cubic-bezier(.22,.61,.36,1);
    transform-origin: center center;
  }

  .card-front {
    position: static;
    z-index: 2;
    transform: rotateY(0deg);
  }

  .card-back {
    transform: rotateY(180deg);
    z-index: 1;
    justify-content: space-between;
    padding: 20px;
  }

  .ingredients-card.flipped .card-front {
    transform: rotateY(-180deg);
  }

  .ingredients-card.flipped .card-back {
    transform: rotateY(0deg);
    z-index: 3;
  }

  .card-image {
    width: 100%;
    height: 180px;
    object-fit: cover;
  }

  .card-content {
    padding: 40px 20px;
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .card-title {
    font-family: var(--font-heading-main);
    margin: 0 0 20px;
    font-size: 16px;
    line-height: 20px;
    color: var(--color-main-text);
    font-weight: 700;
    letter-spacing: 0;
  }

  .card-description-container {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
  }

  .card-description p {
    color: var(--color-subtext);
    font-size: 14px;
    line-height: 20px;
    letter-spacing: 0;
    margin: 0;
  }

  .card-image {
      object-fit: cover;
      width: 100%;
      height: 160px;
      pointer-events: none;
      backface-visibility: hidden;
  }

  .expand-btn,
  .close-btn {
    border: none;
    background: transparent;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
  }

  .expand-btn {
    position: absolute;
    right: 20px;
    bottom: 15px;
  }

  {% comment %} .close-btn {
    align-self: flex-end;
  } {% endcomment %}

  .close-btn {
    order: -1;
    align-self: flex-end;
    flex: 0 0 auto;
  }

  .card-back-content {
    position: relative;
    display: flex;
    flex-direction: column;
    height: 100%;
    gap: 6px;
  }

  .card-back-content__descr {
    flex: 1 1 auto;
    overflow: auto;
    -webkit-overflow-scrolling: touch;
    {% comment %} scrollbar-gutter: stable both-edges;{% endcomment %}
  }

  .card-back-content__descr p {
    margin: 0;
    {% comment %} overflow-y: auto;
    max-height: calc(100% - 40px); {% endcomment %}
    color: var(--color-subtext);
    font-size: 14px;
    line-height: 20px;
    letter-spacing: 0;
  }

@media (max-width: 1260px) {
    .ingredients-grid {
      grid-template-columns: repeat(3, 1fr);
      padding: 0 10px;
    }
    .ingredients-card {
      min-height: 320px;
    }
  }
  
  @media (max-width: 1024px) {
    .ingredients-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    .ingredients-card {
      min-height: 300px;
    }
    .card-content {
      padding: 32px 16px;
    }
  }
  
  @media (max-width: 749px) {
    .ingredients-grid {
      grid-template-columns: 1fr;
    }
    .ingredients-card {
      min-height: 220px;
    }
    .ingredients-grid__header {
      padding: 0 10px;
      margin-bottom: 50px;
    }
    .ingredients-grid__heading {
      font-size: 26px;
      line-height: 20px;
    }
    .card-title {
      font-size: 16px;
      line-height: 20px;
    }
    .card-description p{
      font-size: 13px;
      line-height: 18px;
    }
    .expand-btn svg,
    .close-btn svg{
      width: 24px;
      height: 24px;
    }

    .expand-btn {
      right: 15px;
    }
  }
</style>

{% comment %} <script>
    {% comment %} document.querySelectorAll('.ingredients-card').forEach((card) => {
      card.addEventListener('click', (e) => {
        card.classList.toggle('flipped');
      });
    }); {% endcomment %}
  
    if (window.innerWidth >= 750) {
      document.querySelectorAll('.ingredients-card').forEach((card) => {
        const inner = card.querySelector('.card-inner');
        card.addEventListener('mousemove', (e) => {
          const rect = card.getBoundingClientRect();
          const x = e.clientX - rect.left;
          const y = e.clientY - rect.top;
          const centerX = rect.width / 2;
          const centerY = rect.height / 2;
          const rotateX = ((y - centerY) / centerY) * -4;
          const rotateY = ((x - centerX) / centerX) * 4;
          inner.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
        });
        card.addEventListener('mouseleave', () => {
          inner.style.transform = `rotateX(0deg) rotateY(0deg)`;
        });
      });
    }
</script> {% endcomment %}

<script>
if (window.innerWidth >= 750) {
  document.querySelectorAll('.ingredients-card').forEach((card) => {
    const inner = card.querySelector('.card-inner');

    let rafId = null;
    let rx = 0, ry = 0;           
    let targetRX = 0, targetRY = 0;
    const MAX = 5;                
    const EASE = 0.12;           

    function animate() {
      rx += (targetRX - rx) * EASE;
      ry += (targetRY - ry) * EASE;
      inner.style.transform = `rotateX(${rx}deg) rotateY(${ry}deg)`;
      if (Math.abs(targetRX - rx) > 0.01 || Math.abs(targetRY - ry) > 0.01) {
        rafId = requestAnimationFrame(animate);
      } else {
        rafId = null;
      }
    }

    card.addEventListener('mousemove', (e) => {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const cx = rect.width / 2;
      const cy = rect.height / 2;

      targetRX = ((y - cy) / cy) * -MAX;
      targetRY = ((x - cx) / cx) *  MAX;

      if (!rafId) rafId = requestAnimationFrame(animate);
    });

    card.addEventListener('mouseleave', () => {
      targetRX = 0;
      targetRY = 0;
      if (!rafId) rafId = requestAnimationFrame(animate);
    });
  });
}
</script>


{% schema %}
{
  "name": "Ingredients Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Заголовок",
      "default": "Інгредієнти"
    },
    {
      "type": "range",
      "id": "padding_top_desktop",
      "label": "Padding зверху (десктоп)",
      "default": 0,
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "padding_bottom_desktop",
      "label": "Padding знизу (десктоп)",
      "default": 0,
      "min": 0,
      "max": 160,
      "step": 4,
      "unit": "px"
    }
  ],
  "blocks": [
    {
      "type": "ingredient",
      "name": "Картка інгредієнта",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Зображення"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Назва",
          "default": "Назва інгредієнта"
        },
        {
          "type": "richtext",
          "id": "short_text",
          "label": "Короткий опис",
          "default": "<p>Короткий опис інгредієнта</p>"
        },
        {
          "type": "richtext",
          "id": "full_text",
          "label": "Повний опис",
          "default": "<p>Повний опис інгредієнта</p>"
        },
        { 
          "type": "text", 
          "id": "products_csv", 
          "label": "Продукти (CSV хендли)" 
        },
        { 
          "type": "text", 
          "id": "tags_csv", 
          "label": "Теги (CSV хендли)" 
        }
      ]
    }
  ],
  "max_blocks": 30,
  "presets": [{ "name": "Ingredients Grid", "category": "Custom" }]
}
{% endschema %}
